
1. Develop familiarity with the React.js Library
2. Explore state and state-management
3. Navigation and assets in React.js
/*
Welcome to react basics in this course. You'll be introduced to the basics of working with react. During this module you'll learn how to develop a working familiarity with a basic structure and use of the react.js library. Explore the concept and practical use of State and State Management and discover how to set up navigation and make use of Assets in your react apps. You'll begin by learning how to work with react to build modern user interfaces or UIs on website front ends. This involves the concept of Standalone parts of the user interface or UI. These Standalone bits of UI are commonly referred to as components. You'll explore components in more detail later in this module. For now it's enough for you to know that every website's UI is built on a foundation of components and composability. Simple components combine into more complex ones which eventually merge to former websites. So a website can essentially be viewed as a highly complex component. Components and website UIs are not limited to react but a part of the reason why react is so popular is because it streamlines the process of building and composing components. React does this efficiently and without a significant impact on your browser's resources. Another major topic that will be discussed in this course is working with state in react apps. You'll learn a lot more about states you go through the course. But, for now, here's a simple definition of State. State is simply all the values of all the variables your app is working with at any given point in time. As you progress through this course you'll also learn about how to style your react apps which includes the reuse of common Styles(1. Styling React apps, 2. Event handling). Setting up your apps to respond to events such as clicks and User submitted data creating navigation routes and using assets and you'll finish off the course with a portfolio project where you'll apply your new knowledge. I hope you're as excited as I am to begin this course on react Basics. Let's get started. 

// Speech of a React engineer at Meta of facebook..
My team uses react and we use a lot of new and experimental features that the react team is building. Facebook.com is like a demonstration of all the new and cool features that react Engineers are working on. So when we rewrote the website we were actually using a lot of like unreleased features and kind of experimenting with a lot of new things that the react team is building which is really cool to kind of use it first foreign. [Music] and I'm a software engineer on the react apps team at meta and we work on building a variety of new features for facebook.com. There are plenty of react-based apps that you've probably used before Facebook and Instagram are two examples but Netflix, Airbnb, New York Times and a variety of other companies also use react for their websites as well. So you've likely encountered it before. These websites that tend to have really interactive UIs are more likely to be using something like react. So facebook.com had become really not performant and not modern looking after like the 10 or so years that we had been using it we had squeezed all of the performance wins that we could out of facebook.com. So really the only option at that point was to rewrite it on a different stack that was going to be a lot faster and a lot easier to build on. Basically there was a need for having a really fast and responsive UI and react fills all of those needs. So this was like kind of like a shift in thinking differently about how we build on web. We actually rewrote our website a couple years ago to be completely react and so every engineer who's writing for facebook.com at meta is pretty much using react. I was there for like the middle of it to finally launching it. So it was cool that like a little bit of it was already written and we were getting prepared to show it to like real users. I think like 40 Engineers on our team were all working on building out this MVP of the redesigned facebook.com and we would work with a variety of product teams to get them to also rewrite their product on our new stack as well. It was a really big effort and it was also a really big risk not all the teams that we talked to thought that we could ship this new version of facebook.com. So we really had to prove that it was faster it obviously looked more modern but we had to prove that it would really help these products. Teams deliver the best version of their product that they could on web. So react is open source meaning that anyone can contribute to it and those engineers are working full time on react but we also have developers who are at meta who are also contributing to react and that means that there's a really strong Community around react and a lot of people are really excited to build on it and make improvements to it. So if you ever have any questions or you have an idea about a certain feature or optimization or Improvement there's really like great opportunity to actually contribute to the react Library itself. So there's a react team at meta and this team is comprised of Engineers who are working on react full-time but there's also a group of developers outside of meta who are contributing to react as well. I think the open source part of it is really cool just because there's such a community around react. It's constantly being updated and maintained and there's always going to be someone available to like answer questions or to update documentation. It's very current if you're using react for the first time. Definitely take a look at our documentation. There are a lot of conversations being had about react online and we actually have a react conference every year where we talk about new features with react and you can just connect with a lot of react developers. So there are plenty of opportunities to get involved in the react community and I think it makes building with react even more rewarding if you kind of connect with the community as well. React is used everywhere in the tech world and you'll have the chance to use it throughout your career. So it's a very valuable skill set to have.

// Second Speech of Katie
[Music] yeah my name is Katie and I'm a software engineer on the react apps team at meta and we work on building new features using react for facebook.com .My first encounter with react was actually in a senior design project back at College. We were looking for a great client-side library to use for an app that we were building and react seemed like the easiest to use and the fastest to build on. I had already gotten my job at meta but I didn't know what I was going to be working on at meta. So it was cool to kind of get this experience with react. Realized I really enjoy working with it and then get to do it in my day-to-day work. So I feel like in school you tend to do a lot of object-oriented programming which uses inheritance react doesn't use any of that it uses something called composition. So that was a little bit difficult to think about but there's so much documentation around react and such a strong community that it's easy to pick up and you have support coming from so many different places. You can just go onto YouTube and watch a video, read through the documentation or look at other open source projects that use react. So there's so many resources to pull from. I think developers outside of meta choose to use react for the same reasons that we do at meta it's super easy to learn and pick up. You're able to create really custom UIs with react. We're building so many different features on facebook.com every day that require a lot of custom components and UIs. So it's nice to have the flexibility that react provides I would say react is the best choice for an app if your UI is really custom and you're looking for a lot of flexibility with what other libraries you can integrate for your app or website. React is just a front-end Library. You're going to need to interact with other third-party libraries too and if you want the flexibility of integrating with Redux or other third-party libraries, react is the perfect choice for you. React is also great if you have complex UIs where you want to reuse code across many different pages. So I think it's a great choice if you're building a complex website with a ton of features across a ton of different pages. I think react solves the problem of code reusability. Really well here at meta, we have a core set of UI components that we're actually able to reuse across the site and this means that we're able to build a lot of like functionality into these core UI components like accessibility. I think we're able to have like a high quality bar across the site just because we're reusing components everywhere and we're able to kind of share code even across Facebook and Instagram and messenger. So I think that's a really unique part of react. It's really interesting because if I find a bug in a core UI component and I fix it. I'm not only fixing it for my one use case. I'm fixing it for use cases across the site. So I think it's a really smart way to like use engineering effort. You're fixing a bug once and you're solving one problem everywhere. So I would say the biggest competitor of react is angular. Angular is a bit different from react in this in that it's a full-fledged solution for an app or website you don't really need to integrate with third-party libraries. When using angular whereas with react it's just a client-side library. So you do need to figure out how you're going to do routing and server client communication. I would say react provides more flexibility with creating these like complex custom UIs whereas angular makes it easier to create a single page web application with like an out of the box solution. Learn by doing try to make an example app. Don't go and try to create the most complex app. You've ever heard of I would say start simple. Make sure you're using best practices continuously reference documentation to see if you're using hooks the way you're supposed to and that sort of thing and it should come pretty easily. I think one of the great benefits of react is how easy it is to pick up and learn. There are a lot of different pieces of react and a lot of different concepts to learn but it's really well worth it in the end because you're going to counter react in your day-to-day work hopefully for the rest of your career and there's a huge Community behind you ready to help, answer questions about react.

To recall the concept of the single page application or spa for short. This is a one-page website to where some of the pages content changes based on user interaction. Spas differ from traditional websites where each web page needs to be loaded as the user navigates around the site. This frequent reload can be considered inefficient as some of the same content such as logos, navigation and Footers need to be loaded again and one of the most popular ways to build an Spa is with the react library from meta. React is used to run many of the world's most popular websites often on these sites you'll type A search term into the site's input box. The site then Returns the relevant content or results but you might notice that even though the content has updated the site's URL doesn't change as Spas only loads the content as required. they can be ideal for businesses and Enterprises who need a web app that offers Rich user interfaces speed, scalability and flexibility. As an aspiring developer you may feel like there are a lot of new Concepts and processes to understand when working with react. But you can be sure that you will have an opportunity to get familiar with and use them. In this video you will learn about the basics of react by exploring the concepts of the component-based architecture components and the virtual Dom. Let's begin with components one of the core building blocks of react. When meta released the react Library. It included the concept of something called component-based architecture. This is essentially a design philosophy for building software based on reusable components of code. Each component consists of well-defined functionality that can be inserted into an application without requiring modification of other components because components are reusable. They can be used multiple times and easily inserted anywhere where needed. This results in components that can exist within the same space. Yet interact independently from each other one of the advantages of developing using components is that many developers can work on the same Project without interfering with the code of other developers components. As you may recall, modern front-end web development revolves around the concept of creating Standalone parts of the user interface or UI for short. Well, in react, these Standalone paths are created using components which form the foundation of all UI design. It's important to know that all UI is composed of simple components that can be combined into more complex components. In fact, you can think of an entire website as just a collection of components. For example, consider the product checkout page of an e-commerce web application. The page consists of three sections a header, a payment section, and a sidebar. The header section contains the company logo with a navigation menu and a button to view the shopping cart. The payment section area contains a form where the user inputs their payment information. Finally, there's a sidebar with the order summary information as the components are self-contained. They have their own HTML CSS and JavaScript Logic for functionality. For example the payment section component has a JavaScript function that submits a payment when a button is clicked. It's important to know that the use of components in website UI design is not limited to just react. Many websites front end or UI are built on the foundations of components and composability. But react is a powerful tool for streamlining the process of building components and composing them. It performs these actions efficiently as components are rendered to the Dom without significantly impacting the browser's resources. This is called component rendering and you'll learn more about this and its Associated render method later. You may recall that the Dom is a logical tree-like structure representing the HTML document and it uses nodes to describe the various parts of the document. Before react you could still build component style layouts.However it involved much more complicated Dom manipulation and code making the layout more complex and harder to work with. This resulted in something known as spaghetti code. The term developers use in web developments to describe code that is complex, convoluted and difficult to understand like spaghetti. React prevents this spaghetti code by avoiding any manipulation of the Dom. Instead, react provides something known as the virtual Dom. You may recall that this is an in-memory representation or clone of the real Dom which minimizes updates to the Dom itself. React uses the virtual Dom to update the browser Dom only when needed. This ensures that the update is as minimal as possible increasing the application Speed and Performance. In this video you learned about the basics of react by exploring the concepts of the component based architecture components and the virtual Dom. Recall how you learned about functions in JavaScript. They are reusable blocks of code that can take an input. Perform some procedure or calculation and then return an output. Well, a react component acts much like a traditional JavaScript function. In this video, you'll continue your exploration of the structure of the react architecture by learning about functional components, component types, jsx and transpiling. React provides two types of components functional components and class components. They behave very similar in react to traditional functions and classes. In JavaScript, don't worry about class components for now. You'll learn more about them later. Instead, let's just focus on functional components which act like a JavaScript function. In the default react application only one component is rendered and it's the app component located inside the index.js file that's located inside the source folder. It's important to know that every react app must contain at least one component and it's called The Root component. This component is loaded using the import statement. You'll learn more about the import statement in react later. For now, just know that it's used to import code needed for react to work such as the import react and import react Dom statements. The syntax to render a component is very similar to a self-closing tag in HTML. You just place the component name inside the left and right angle brackets and don't forget to the forward slash. The root component can contain other components that developers create to represent the various UI parts of the application like in the e-commerce example that you learned about earlier and recall that this component is ultimately converted to a Dom fragment and placed into the existing Dom as a child of the HTML div element with an ID of root. This div element is then rendered to the browser. If you analyze the app component, you'll notice that it looks very similar to a JavaScript function with some HTML code inside. You may also notice an export default statement. You'll learn more about this soon. For now, just know that you need it to make your components available. Okay, So now, that you're familiar with the concept of functional components. Let's explore how web developers create them in react. React is scripted using a special kind of syntax called JavaScript XML or jsx. For many react developers, this is known as a syntax extension to JavaScript. So what is jsx syntax like? Let's find out by going back to our react default app component. Recall that, in the return statement of the app function. It seemed that some HTML content is returned well. This content is not exactly HTML. It's jsx. jsx syntax looks very similar to HTML and one of its advantages is that it allows you to write JavaScript code inside what looks like HTML elements.In fact, you can think of jsx(syntax extension of JavaScript) as a combination of custom HTML and JavaScript. This allows you to make your website Dynamic. You'll learn more about the differences between HTML and jsx later. For now, just know that you can place this syntax inside the return statement of a functional component. It's also important to know that a react component won't render until it's used as a jsx element just like a JavaScript function declaration won't run until it's called or invoked. Okay, so now, you know what jsx is. Let's explore the steps involved to create a react component which will contain some jsx code inside a heading 1 HTML element to display some text on a web page. First you create the component which is basically just a JavaScript file. Since its purpose is to return some heading text, you name the file Heading.js. Notice that the first letter of the component name is capitalized this is because there's a difference in how react trees capitalize and non-capitalize component names. So it's important to remember that all component names in react must be capitalized. Why is this? Well, because react treats lowercase components as regular HTML elements. Capitalizing a component name helps react to distinguished jsx elements from HTML elements. Now let's continue with our component. Next, inside the app.js file create a function named Heading. The function name must also be declared using a capsule letter for the first letter of the function. Then inside the function body, you create a variable named title and assign it the string value of 'This is some heading text'. Now you're ready to create the return statement of the function. Inside the parentheses of the return, insert a heading 1 tag and inside it place the variable named title to make react evaluate the title variable. You need to place it inside curly brackets. if you didn't use curly brackets you'd get the word title instead of this is some heading text. At this point it's worth remembering that while you are creating HTML like syntax you are actually coding inside a Javascript file and because of this you can output a variable inside your jsx code something you cannot do when writing static HTML. The overall syntax instructs react to render The Heading HTML element with whatever text value that is stored within the variable named title this rendering happens behind the scenes because of something called transpiling. You can think of transpiling as a process of converting jsx to HTML and you'll learn more about this later. 
*/

/*
inside App.js
function Heading() {
    let title = "This is some heading text";
    return (
        <h1>title</h1>
    )
} 
*/

/*
In this video, you learned about functional components and how to create them in react. You'll also learned about jsx which acts like a combination of HTML CSS and JavaScript that you can use to generate Dynamic content inside your functional components. Finally you explore the concepts of rendering and transpiling. If you would like to learn about these Concepts in more detail, there's a link to an additional reading at the end of this lesson. In this video, you will further explore the concept of components in react and learn how to create a component from scratch. You'll be introduced to the concept of the export statement and how components can be used to create reusable blocks of code. I've launched vs code here and I have the creating component folder open in the built-in terminal. Now I'll execute the command npm init react app dot. The dot character instructs vscode to run this command in the current folder. In other words, I'm using Create react app to build a new app for me inside this folder. I execute this command by pressing the enter key. I wait for the app to build and once it's ready. I can start the app by typing npm then a space followed by start. The process of building the react app could take a couple minutes. So just sit tight while it builds. Great my react app has started and loaded in the browser at localhost 3000 which is the local server notice that I have all these files and folders in the left pane of vscode now such as node modules public SRC and files like package.json. You'll learn more about these later. For now, the only folder I need to work in is the SRC folder. So don't worry about all these other files and folders. Instead I want you to focus on how to build a component in react and to do that let's have a clean start. The easiest way to do this is to remove all the code inside the function inside the app.js file. I guess you might say this is the simplest possible component. I'm declaring an app function and I'm exporting it as a default module. I save my file and notice that my app is just a blank page. Now, let me create another component that'll contain some text that I want to display in the browser. To do this, I create another function called Header and in the function body I'll just return some greeting text inside an H1 jsx element. Inside the H1, I type hello world. My code looks good now but my screen is still white. This is because I'm not yet rendering anything from my app function. To do this, I need to return to my app function and call the Header function from it. I use the jsx element syntax to render a component which is the name of my function. So inside the body of the app function, I create the return statement and type the function name of Header. Inside left and right angle brackets, now forgetting to add the forward slash before the right angle bracket notice that the syntax to render a component is very similar to a self-closing tag in HTML press Ctrl s or command s if you're on Mac to save everything again. Great, my code is working now and I notice an HTML heading with a text hello world displayed in the browser. Congratulations!

// import logo from "./logo.svg"
// import "./App.css"

// function Header() {
    return <h1>Hello World</h1>;
}
// function App() {
    return <Header />
}
// export default App;

In this video, you learned how to create a functional component this component named app calls another component named Header which displays an HTML heading with some text. At the moment, the Header component code exists in the same file. As the app component to make the Header component isolated and reusable I need to place it in its own file then I can reuse it multiple times in the application anytime I want to display a Heading element with some text and you'll learn how to do this very soon. In this video, you'll learn how to create a functional component in react and render it to the root component named app.js. As you might already be aware it's important to organize or structure your react components so that they're easy to access. But what does the structure look like? what files and folders are found within a typical react application. The react project structure is the focus of this video. By the time you reach the end of this video, you'll have learned how to explain the default folder structure of a react project, outline the benefits of the folder structure. Customize the folder structure to hold components and assets and explain the benefits of planning folder use for app development. Let's begin by examining how the default files and folders are laid out in a react app project when you build a react app using the command npm in its react app. Your project is comprised of a specific file and folder structure. Notice that there are three folders named node modules public and SRC or source. Let's explore each of these folders briefly. Now, first, let's begin with the node modules folder. You can think of this folder as a repository for all the modules in your react app. The node modules folder is automatically added when you install a specific npm package .You might recall that packages or groupings of files and or node.js modules. Developers use packages when they want to add a piece of functionality that someone else coded and made available to other developers via the npm ecosystem. Don't worry too much about the node modules folder. For now, just be aware of it and that it's needed for your react app to work. Next is the public folder and it contains the assets that will be displayed to the user in your app. For example, image files for Logos, the favicon which displays an icon in the browser Tab and the robots.txt file which is used for search engine optimization. Also there is a manifest.json file which is used to provide some metadata to a device when your react powered web app is installed on it. While all these files are necessary, the most important one to know about for now is index.html. A react app gets injected into the specific element. Inside the body of the index HTML file, based on changes happening inside a react app, it injects those updates in that same div of index.html. You'll find out more about how this works later on in the course. Finally, let's explore the contents of the SRC or Source folder. This folder contains all the essential component files required to ensure that a react app functions and notice that there are some files already in this folder. These were automatically created when I used the npm command create react app to build a starter react app as a react developer. You'll probably spend most of your time within this folder. So, let's get a little more familiar with some of these files now you may be familiar with some of them already such as index.js and app.js which are used to render the root components of the app. Let's briefly explore the others app.css contains the styles for the App.js component and the index.css file contains the styles that are used in the entire app. Test.js, Setuptest.js and the report web vitals dot JS are files related to the app's performance and testing the logo.svg file is displayed on the starts page of the default app when the app is displayed in the browser on the Local Host. while these can be useful and their functionality is important I can still safely delete them without affecting reacts abilities. Create a very basic application I just need to also remove the code that references them. This is because react doesn't have opinions on how you organize your files and folders in the source folder. However there are a few common approaches popular in the ecosystem and you'll learn about them soon. It's at this point. It's also worth remembering that the most important file in the entire Source folder is the index.js file this file Imports everything that this react app needs to render a working react app. Okay, so now, you have explored the main folders. Let's explore the files in the root of the default app root files are additional files that are found in the root of the project folder itself and include a git ignore file two Json files and a readme file. The dot git ignore file is used in Version Control and it's used to specify what files and folders must be excluded from a project. it's important to know that this file is not specific to react. This means that other systems use this file too. The readme.md file is a markdown file that gives some basic information on this project. Developers use this when they want to share the Project's code on a site like GitHub. The package.json file lists information pertaining to my app which allows npm to run several scripts and perform various tasks in the app itself. Finally the packagelock.json file holds the list of all dependencies with their specific versions. The package.json file helps npm rebuild the app on another machine or if we delete the node modules folder with all the files that our project needs to run. The packagelock.json file has all the information for npm to be able to rebuild those files reliably. This file is there to ensure that npm tracks all the modules installations properly as a general rule. It's better to leave these files where they are for the moment as they are required for the app to function. You should now be able to explain the default folder structure of a react project and outline the benefits of the folder structure. In addition, you should know how to customize the folder structure to hold components and assets and be able to explain the benefits of planning folder use for app development. Good job, one of the advantages of component-based Architecture is that your app is split up into individual self-contained components and as you have already learned these components can be used to build powerful UIs based on reusable components of code. In order to create a fully functioning react app, you need to create a collection of components. But with the app broken into several different components, you might be wondering how do you locate and integrate them all into your app. 
*/

/*
In this video you'll learn about the concept of modules and how to manage your react components by placing them in a components folder finally you'll explore the structure of the Import and Export statement as a developer you often need a way to use and reuse components that may have been defined elsewhere or created by someone else for example do you recall the concept of modules in JavaScript modules are Standalone units of code that you can reuse again and again being Standalone means that you can add them to your programs remove them and replace them with other modules and everything will still work well in react you can make use of this JavaScript feature to separate your components by placing them in their own file then you can use the Import and Export statements to make the files communicate with each other the export statement is used to make a module available to another module it helps to think of every Javascript file as a module then in order to make the functions and variables available to other files you need to export them which makes them available by the import statement in JavaScript there are two types of exports default exports and named exports the default export is used when the function name is the same as the file name and named exports are used when you want the function name to be different from the file name at this point you may be wondering what is the difference between modules and components since they are both essentially just JavaScript files and you're right while they have similarities it can help to think of a component as a single part or small piece of functionality like a button then you can think of a module as something that's larger than just one component like a series of components this technique of splitting your code into several modules is known as modular programming and it complements a component-based architecture of react to help you understand this better let's explore the following scenario suppose you're a developer currently in the process of building an application with react and there are several components that need to be included in the app some of the required components have already been created by your fellow developers so you need a way to import them into your app to do this you need to use the operation known as importing and in react you import components into your application using the import statement you may have already noticed the import statement in the default index.js file where the app component is rendered in react to import a component you use the keyword import followed by the component name you want to import then you use the keyword from to specify the location of where the component is located you need to use a file name sequence such as a DOT forward slash before the file name but the file name extension is not required okay so now you know about the syntax of the Import and Export statement let's explore how you can structure your component in react remember that a component is essentially just a JavaScript file react doesn't have strict rules on how you put files into folders however there are a few common approaches you may want to consider one approach is to place all components in a folder named components this allows you to structure your projects by grouping similar files together for example suppose you are building a payment page for an e-commerce app the page contains three sections that will each be represented by a component in react first a header section using a component called header then a payment section using a component called Main and finally a sidebar using a component called sidebar each component will be called and have its contents returned to the root component of our application which is app.js in this video you explore the concept of modules and the structure of the Import and Export statement you also learned how to manage your react components by placing them in a components folder by now you should be familiar with the concept of functional components in react they are reusable blocks of code that act much like a JavaScript function recall that in JavaScript you can make your functions more flexible by declaring them with parameters that allow you to pass in values as arguments when you call the function well in react you can perform a similar action using something called properties which are represented as props in this video you'll learn about the props object and how developers use it to pass data from one component to another then you'll explore component hierarchy and learn why components are said to have a parent child structure before you begin your journey with props let's revisit another piece of JavaScript functionality that will help you understand how props work it's called the JavaScript object record this in JavaScript an object is a special type of variable that can contain many values you use objects when you need to store groups of related data of different types and each data type is known as an object property for example suppose you create an object called fruit that contains properties for type quantity and color remember that these properties consist of name value Pairs and you can access the object's properties using dot notation in react you can use a similar technique to pass data from one component to another using the properties object or simply props props allow you to pass data from one component to another it's helpful to think of props as arguments and components can accept and are passed using jsx syntax much like HTML attributes inside a function you use the keyword props okay now that you're familiar with the concept of props let's explore an example to send some props to a component and print them out in a react app suppose you have the default code for the react app open in the index.js file you call the app component inside the app component you return an H1 heading with some static title text while this code works you can make this heading Dynamic by using props let's now explore the syntax involved to create this in the root component index.js you send the value you want to pass to the app component as an argument in the form of an HTML attribute next in the app components you accept this argument using the props object to do this you add the keyword props to the function declaration inside of the parentheses finally to access this object's properties you use dots notation to reference the name of the object property that was passed as an argument by the HTML attribute once again remember to enclose your code inside curly brackets so react knows that you want to work with a propped object and not static text because props is essentially a JavaScript object it can accept many data types ranging from simple types such as strings and integers to more complex types such as functions arrays and objects as a result props allow developers to have greater flexibility when creating and working with components especially when you want the flow of data in your app to be dynamic while you just explored a basic example to dynamically print a heading you'll get a chance to practice with more complex data structures using props later okay so now you're familiar with how props work by sending data between components let's explore this data flow in a little more detail when two components communicate with each other the component sending the props data is known as the parent and the components receiving the props data is known as the child and as you've just learned with the example earlier this parent child relationship allows parent components to pass data down to child components using props it's also possible for parent components to send the same data to multiple child components however it's important to know that this communication is a one-directional data flow it's not possible to communicate from the child's component back to the parent components using props instead developers use other approaches don't worry about that for now you'll learn more about them later although props are a very powerful tool in react they do have some limitations for example you just learned about how it's not possible to send data from the child component back to the parent component using props another important limitation has to do with something called Pure functions in programming a pure function is a function that will always return the same output for the same argument values that are passed in don't worry too much about pure functions for now just keep in mind that in react when you declare a component using props it must never modify its own props in this video you learned about how props are used to pass data to components you discover that a prop is a special react object that works in a similar way to a JavaScript object and that its properties can be accessed by dot notation you also learned why developers use props in order to make their apps more Dynamic and flexible finally you examined some of the limitations about using props in that you cannot use them to send data back to a parent component and that functions using props must never modify its own props by now you should be familiar with the concept of props and that they allow you to pass data from one component to another developers use props when they want the flow of data in the app to be dynamic this makes the app more versatile helping it consume data easier in this video you'll learn the syntax involved to use props and components you'll also explore the passing of props to and within a component using functions during this course you were introduced to an example of how to build a simple blog layout in react using components now you'll be introduced to a new component called the nav component developers commonly build navigation menus using HTML unordered lists and navigation menu is basically just a list which can be styled easily with CSS such a snippet of code is well suited to be placed in its own react component making use of the HTML nav element to act as the block of code to return the jsx from inside the function for example the return statement can contain several HTML like elements such as ul and Li tags and this same nav component can also be rendered as a jsx element to which we can pass Dynamic value with props in order to do this successfully you need to be comfortable with the concept of attributes the best way to develop an understanding of attributes is with a live example of building a component using props here's a practical way to work with props I'm in my app with the header Main and sidebar components and all of them are rendered from the app component the app component is in this case referred to as the parent component and the header Main and sidebar components are referred to as the children of the app component I'll now pass data from the app components to each of its children components first the header component receives a name prop with a value of Anna and a color prop with a value of purple I'm sending those props from the header jsx element inside the app component's return statement press Ctrl s or command s on a Mac to save these changes however my recompiled app is not showing any changes because I send this data through the props object to the header component I'm not using this data in the header component so let me open the header component and I'll first pass in the props object for now I'll just console log the props object again press Ctrl s or command s to save the update and wait for it to compile if I now inspect this object in the console I find the console log props object and it comes with two properties the name Anna and the color purple I can now access the values of the two properties inside the header component using props dot name and props dot color to make sure that the expressions are evaluated inside the jsx syntax I must surround them with an opening and a closing curly brace I press Ctrl s or command s on the Mac again and wait for it to compile now my header shows the props data it received from the parent component I'll Now update the main and sidebar too back in the app component's render statement I add the Greet prop with the value of Howdy in the main jsx element and the value of high in the sidebar jsx element I open the main component file and receive the props object then output the value of opening curly brace props dot greet closing curly brace I can now delete the hello string similarly in the sidebar components file I'll also receive the props object and replace the hello with an opening curly brace props dot greet closing curly brace I click file save all and wait for the app to compile all my components are now using the data they received from their parent components using their respective props objects you should now be able to effectively demonstrate the passing of props to and within a component using classes and functions great work at this point in the course you've been introduced to the concept of jsx and how it's used to interact with components in this video you'll explore jsx in more detail in the context of component and styling you'll also learn how to mix JavaScript HTML and CSS within a component so what is it that makes jsx so special in one word expressiveness developers can express what they want to react to render using a very expressive syntax almost identical to HTML or XML in other words jsx allows developers to write HTML directly inside javascript's code for example you can add navigation function to a website by creating a nav component then place the HTML semantic nav element and an unordered list inside and because this is react the list values can be made Dynamic by passing values as props it's important to know that a regular JavaScript function is used to define how reacts should render the component wherever it's referenced using the nav jsx element and this is what makes jsx so powerful like the fact that you can insert specific jsx Expressions such as variables and props the reason why this is so great to work with is because anything that's placed inside the curly braces of your code is essentially regular JavaScript code for example you could calculate a series of simple expressions using the LI or List item tag this means that you can think of the curly braces as being special areas where you can write any kind of JavaScript code you like and you can write the rest of the code inside the return statement okay so now that you've learned a little more about jsx Expressions let's focus on some jsx rules inside the return statement of the function the return statement can be thought of as the area of expressive syntax that allows you to write regular HTML code as you'd like to have it in your rendered app but if you need to return HTML code over multiple lines it must be placed inside parentheses this allows developers to alternate between regular HTML tags and dynamic values represented as jsx Expressions inside curly braces it's also important to remember that the HTML code must be wrapped in a top level element such as a div tag if you do not want to add extra div elements to the Dom you can use something called a fragment instead this is like an HTML open and close tag without the tag name while you can think of the code inside the return statement as regular HTML it's worth remembering you are in a Javascript file and as a result there are some differences for example you cannot use the keyword class to work with CSS classes in your HTML elements this is because class is a reserved keyword in JavaScript you must use a slightly different keyword called class name instead also notice that class name is written in camel case which depicts the separation of words by using a single capitalized letter you can use class name to list any number of CSS classes to style a specific jsx element inside a component this is just like how you use the class attributes in regular HTML and it's only one of the many ways you can style react apps you'll learn more about how to do this later for now just know that this is the closest to what you would do like if you were working with HTML and CSS website layouts there are some other differences and you'll learn about them later but in Practical terms you can consider the code to be pretty much just like regular HTML in this lesson you explored further the concept of jsx styling and how it's used in react you have now furthered your understanding of how to use jsx to mix JavaScript HTML and CSS within a component great work recall that there are three techniques to include CSS in HTML documents the first is in line by utilizing the style attribute inside the HTML element next is internal by using the style element in the head section and finally external by linking to an external CSS file using the link element in this video you'll learn how to take CSS style rules from an external file named index.css and add it inside a component as an internal style these style rules can then be referenced by your code inside the return statement of the component notice that the components are styled by the external style sheet index.css for this video I'll continue working on an app which consists of the components header Main and sidebar this time the focus will be on using internal styling inside the sidebar component to demonstrate this I don't need to move all the code from the index.css file instead I'll just focus on the Styles related to the sidebar component for example I select the CSS code for a site and cut it by pressing Ctrl X or command X on Mac after saving notice that this removes The Styling from the sidebar component displayed in the browser now let's go to the sidebar.js file where I'll paste the code before the return statement this will not affect my component because I'm pasting CSS code into a Javascript file so I need to make some changes to turn the CSS rule into a JavaScript object to do this I need to declare a site style as a cons variable and then replace the semicolons in the code with commas I also need to replace the hyphenated names with camel case it's important to know that because CSS declarations like background are now an object property I need to make their respective values a string by wrapping them inside double quotes and I also need to repeat this for the other new style elements as well finally inside the site tag in the return statements of the component I need to add a style attribute by typing style equals a side style as a jsx expression I then choose save all in the file menu to save my changes notice that the sidebar component appears in the browser as before I edited the index.css file so that's an example of using inline CSS styling directly inside a component in this video you learned how to take CSS style rules from an external file named index.css and add it inside a component as an internal Style recall that jsx is a syntax extension toJavaScript that is used with react it allows developers to write HTML as part of their component code and is frequently used in react as it offers greater flexibility in this video you'll learn how jsx is used and how to use its key feature embedded Expressions first let's examine a jsx example that will output some text on a web page the code consists of a paragraph HTML element containing the phrase hello world it is assigned to the constant variable named result note that when this jsx code executes the result variable will contain a react element that can then be inserted into the web page this is one of the key features of jsx building react elements from HTML code automatically let's explore another important feature of jsx which is embedded expressions embedded Expressions allow developers to insert the values of JavaScript variables into the HTML of the resulting react element embedded Expressions can also embed the outputs of functions let's say you need to Output the person's name in a specific format to do this you can first create a function named format name that will return the first name and surname with a space character between them in your jsx you can then call this function inside the curly brackets as with the previous example the value that the function generates for the JavaScript variable will be output in HTML Expressions can also be used for HTML attributes this is useful if you need to insert the address of a person's profile picture to do this first you would store the profile picture address in a variable named URL the image will be displayed using the IMG elements so you should embed the URL variable into the SRC attributes note that the double quotes are not needed for the attribute value as jsx will automatically add these this is just one example of how jsx is an efficient way of outputting HTML elements that contain JavaScript variable content and you'll encounter more as you progress in this video you explored several jsx examples including one that uses embedded Expressions to insert the values of JavaScript variables into HTML within a react element I'm building an application using react and I now need to add a new feature to the app that renders images I can do this by embedding a JS expression in an attribute specifically the SRC attribute of the HTML image tag over the next few minutes I'll guide you through the process as I complete the steps and by the end of this video you'll be able to demonstrate how to embed a JS expression in an attribute including adding additional styling and importing additional assets and utilize additional assets within an app by importing components now I'm in the app.js file of a new project and start with an app component that Returns the H1 header text hello world I've previously copied the Avatar profile image from the Coursera GitHub account which is publicly available through the GitHub API I've pasted the images into the roots of the SRC folder and named it avatar.png in order to use the image I need to import it into the app component I then add a new function in the app.js file named logo the logo function is essentially a separate component but to keep things clean for this example I'll save the code in the app component instead of a separate file the logo function accepts the props object and inside of the logo function I declare a user pick const and assign it a jsx element this is an image element and I'm passing the imported Avatar PNG image as a value of the SRC attribute inside this image element finally I'm returning the user pick cons from the logo function back inside the app component I'll now render the logo component by adding the logo element inside the app component's return statement Let Me Now preview my app in the browser great so it displays the header text along with the image keep in mind that if I were to continue building this app with more components it would be best to extract the logo component to its own file and then import and render it as needed and that's a demonstration on how you can embed a jsx expression in an attribute in this case the SRC attribute of an HTML image tag well done you've reached the end of this module on react components module 1 gave you an overview of the basic structure and use of react.js the purpose was to enable you to produce single page applications with react let's take a tour of the lessons to determine how it did just that first you learned about how react is used in the real world for meta software engineer Katie then to lay the foundation for the hand on Labs you had a quick summary of the fundamentals of HTML CSS and JavaScript and then you learn how to set up a project in vs code and how to work with JavaScript modules the second lesson was all about react components and where they're stored within your applications in this lesson you were introduced to component-based architecture a design Philosophy for building software based on reusable components of code like the react Library you learned about component types and component style layouts that use the virtual Dom and you learned how to create components that form the foundation of UI design in this lesson you also learned more about jsx a special kind of syntax that acts like an extension of JavaScript you learned how to transpile it in other words convert jsx to HTML which helped you to understand how a component is built and in the young graded Labs you learned how to build a new component inside the app component and have it rendered on screen as well as how to save a component to its own file and importing it into its parent components so that it can be rendered on screen the third lesson was about component use and styling you learned how to pass data from one component to another using properties and your ability to do so was tested in the ungraded lab and in the other ungraded lab you learned how to render one component multiple times using different props you also learned more about how to use jsx and its embedded expressions and how to style jsx elements in a way that is functional and looks good as part of this lesson you learned how to use and manipulate props and components define components using function expressions and arrow functions invoke functions inside of jsx expressions use Expressions as props declare components that require props and use expressions and embedded expressions in attributes after completing this module you are now able to explain the concepts behind react and component architecture create a component to serve a specific purpose create a component folder and demonstrate how to create and import files within that folder user manipulate props and components to affect visual results and describe how to use assets within an app to apply styling and functional components that's a great start to your react Journey well done on completing this module and get ready for the next one by now you're probably familiar with events in JavaScript recall that events are the process by which JavaScript interacts with HTML and can occur when the user or the browser manipulates a page they provide enhanced interactive experiences such as responding to Mouse clicks movements or keyboard commands because events usually rely on some sort of interaction they need to wait and listen in the background for that interaction to occur before they can be triggered every HTML element contains a set of events that developers can access by using HTML attributes commonly referred to as event listeners for example it's a common feature of a website or app to have a button that when clicked causes something to happen this action is an example of an event and is accomplished with either event listener methods or by defining specific JavaScript functions developers can use events to execute javascript's code in response to an action based on user interactivity like clicking a button this process by which the HTML button communicates to the JavaScript event handler to execute some Korean response to the event action is known as triggering for example you might want to listen for a click event on an add to cart button once you capture such an event you might want to run some JavaScript code in this example add a circle with a number one in the shopping cart to indicate one item has been added if the same event gets triggered or fired again our event handling code then handles the event by updating the count in the circle next to the shopping cart icon the circle then displays a number two to indicate that there are two items in the cart events are a powerful tool and make up part of the document object model as an aspiring react developer you'll need to know how to work with events as they are handled a bit differently by the end of this video you'll be able to identify the broad types of events available in react and describe some of the most commonly used ones you'll also know how to explain the event handling process in react at a high level in react code events are handled using jsx event attributes which are very similar to HTML event attributes that you may be familiar with for example The Click handling attributes in HTML is the on click attribute with all the letters lowercased the equivalent click handling attribute in reacts jsx is the camel cased on click attribute remember that camelcase means that the first letter is lowercase and the separation of words is indicated with a capital letter rather than a space there are many events supported in react which can be divided into several groups those groups include clipboard events composition events keyboard events and many more each group usually holds multiple events for example supported Mouse events include on click on context menu on doubleclick and several others you'll also find that the clipboard group has the useful events on copy on Cut and on paste there are far too many events to cover here but you can find a complete list in the additional reading the large number of event types that are accessible in react may seem overwhelming at first but note that it's actually the browser that comes with these features as the various devices that we use to access the internet have given rise to many ways for users to interact with websites this means these events are not specific to react and it's probably not necessary to learn about all of these events also keep in mind that many of these events are related to specific use cases for example several of the mouse events are limited to the drag and drop API in other words at this point in your Learning Journey your focus should be on understanding the overall event handling process and what capabilities events can open up to you in this video you learned about the types of events available in react and how they came to be next you'll explore specific examples and build the skills to use events confidently for various situations I will now show you how to handle several events in react using components as a start I've added a new component to the SRC folder I named it BTN and for now it's just an empty function with a default export let me simplify the app.js files return statement first I'll delete the logo import statements and import the BTN component instead and then remove the contents of the return statement then finally I'll add the BTN jsx elements so that it can get rendered back in the BTN component I add a button in the return statement the button reads click me press Ctrl s or command s on the Mac to save and the button renders on the screen now I would like to handle a click on this button so I add the on click synthetic event then an equal sign an opening curly brace click Handler with a capital h and a closing curly brace and the return statement I distribute the code on several lines to increase readability now I'm setting up the click handling Behavior whenever a user clicks on the button that'll evaluate an expression named click Handler I now need to Define this click Handler and I'll set it as a function expression meaning I will use the cons variable keyword and name it click Handler then I'll assign an arrow function to it that's it I've just set up a click Handler that receives the click event that's fired from this button and handles it by outputting the word clicked in the console again I save my changes and in the browser I open the developer tools now I locate and activate the console tab in the developer tools I'll also zoom in on the button when I click the button the word clicked appears in the console for every click event back inside the btn.js file in vs code I select all the code in the BTN component right click on the selection and click the copy command in the contextual menu that pops up next I use the keyboard shortcut of holding down the Ctrl key and while it's pressed down press and release the K button then pressing and releasing the C button and finally releasing the control key so Ctrl K C that comments out all the highlighted code right under this commented code I now press the Ctrl V keyboard shortcut to paste in the code that I have previously copied I will now show you how to handle a different event let me replace the on click jsx event handling attribute with another one and thus handle a different event for example I can replace the on click attribute with the on Mouse over attribute and update my event handling function accordingly to read Mouse over I save my changes and wait for the app to recompile this time when I hover over the button the words Mouse over are showing in the console in this video you've learned how to work with event handling jsx attributes in react every time you click or Tap a button scroll down a page or cancel a boring notification you're producing events in the browser and as you learned earlier in order for these events to have any effect you need to use event handlers that will then execute an action for example suppose you use a button to open a menu clicking the button is the event the event handler is on click and the action that follows the event is opening the menu there are a few approaches to adding event handlers to your react code that have different advantages so you'll become familiar with each of them by the end of this video you will be able to describe the syntax differences for using event handlers in HTML and react you will also know how to explain HTML function call and react component inclusion and discuss the advantage of the component level of control suppose you're a developer working on a react app and you need to create a button that will trigger an event when a user clicks on it with that scenario in mind let's examine some codes that accomplishes this in plain HTML you might open a tag called button with the ID jsbtn you then assign the on-click event handling attribute and set it equal to the click Handler function next you can add click me as a button text and finish with a closing tag the code has an ID HTML attribute with a value JS button along with the event handling attribute on the click while the HTML code in the example seems pretty straightforward it's recommended to use JavaScript for scenarios like these instead why is that well you'll find out later but for now you should understand that the equivalent coding JavaScript consists of two primary steps first you should use JavaScript to plug into the specific HTML element on which you'd like to listen to for an event in the previous example the HTML element is JS button which signals that it's a Target element for allowing JavaScript to take control of the HTML structure second once you've got an access to an HTML element with JavaScript you can then use the built-in add event listener method on the document object to attach a specific event listener when you apply this method to the previous example HTML is removed from the equation but the code on the other hand is a bit more complicated specifically you need to First declare a constant called JS button and assign the value from the Dom then you need to add the click listener event and the function to run the code going back to react the biggest difference in syntax involves the use of the add event listener method in react the rule is to avoid manipulating the Dom directly as much as possible you should set everything up declaratively meaning that you describe updates to react and let it figure out the rest this is best done using event attributes unfortunately one-to-one mapping between HTML event attributes and jsx event attributes means it's easier to learn event handling and react is overall quite similar to HTML but note that there is no function invocation syntax in event handling attributes in react in other words while in plain JavaScript you would need to pass an invocation to an event handling function as a value to the on-click events in react you should not invoke a function instead you just pass a reference to the event handling function without invoking it to illustrate that point let's compare the syntax of an HTML click Handler event and its react.jsx equivalent in HTML you provide the event handling attribute starting with on and you append the name of the event or lowercased after the equal sign you use a pair of double quotes and inside of the double quote delimiters you invoke the function that will run contrary to HTML in react you provide the event handling attribute starting with on and you append the name of the event with each word's first letter capitalized after the equal sign you use the jsx expression delimiters that is the opening and closing curly braces and inside of the curly brace delimiters you add the name of the function to be run make sure not to invoke it finally one more feature only used in react is the passing of function declarations as props for example in an app component let's say you'd like to render a child component named counter you can pass some data from the app component to the counter component using a prop in this case let's use an on-click prop that passes in the data that you want the counter component to receive and there you have it so the next time you're clicking buttons on a web page closing notifications or simply browsing through you'll understand that those events are supported by some form of event handling in this video you learned how to distinguish the Syntax for event handling in HTML and JavaScript in this video I'm going to demonstrate how to toggle the value of a Boolean State variable using user triggered events and how to handle multiple events on a single jsx element in the example that you'll explore next the code consists of another example of a component than what you've been used to so far in the course the Amis of demonstrates how all the event handling Concepts work together with State styling and the use of ternary expressions let's say that you have a component that uses states to keep a Boolean value of dark mode on based on whether the value of this variable is true or false your component will render an H1 heading with some text in it either as a dark theme or as a light theme additionally it's possible to switch the theme with a button click now let's continue with an in-depth demonstration of event handling I'm going to demonstrate event handling with an example so that you can gain practical insight into the use of events to provide additional functionality to an app I'm going to build a component and I'll name it mode Toggler so in the Explorer sidebar in vs code I right click the source folder and click the new file command I name the file mode Toggler and for now it's an empty function declaration with a default export I press Ctrl s or command s on a Mac to save my updates back in the app component I update its return statements to render this new mode toggle a component I also need to import it on line one of the app component and save the changes to app.js I now return some jsx code from my mode Toggler component and add a return statement in this statement a jsx expression wraps the ternary which checks if the value of dark mode on is true or false if it's true it will return whatever is stored in the dark mode value and if it's false it will return whatever stored in the light mode value however I don't have the values I'm evaluating yet so if I save this code now it throws an error instead I Define these values by declaring three variables above the return statements these are dark mode on which holds a value of true dark mode which holds the text dark mode is on in an H1 header and light mode which holds the text light mode is on in an H1 header I saved my changes and I get the sentence dark mode is on in the browser let me explain what happened here the dark mode on variable is set to true just to do a quick test I can change the variable name of dark mode on in the ternary to the value of true since this value is true the value that's stored in dark mode will be rendered if I change the value of true to false the value that's stored in light mode will be displayed I have replaced the test word false with our const dark mode on and now I'll save it and test it again now I get the light mode is on displayed on the screen I add a button with the on-click events to handle this toggle of the value of the dark mode on variable from True to false so under this ternary statement I'll add a button with an on-click event handler I'll also Define the handle click function I start my function by taking the value of dark mode on and change it to the opposite Boolean value using the exclamation mark that is the not operator I then assign this value as the new value of the dark mode on variable to explain this a bit more if the value of Doc mode on was for example true then the not dark mode on will be evaluated to not true this not true will be assigned to the dark mode on variable thus becoming false I now add to the rest of the code for the handle click function which is an if statement the logic states that if the dark mode on is set to true then console log dark mode is on otherwise console log light mode is on I could have perhaps written this code a bit differently but I wrote it in a way that makes it obvious what is happening here this is always good practice for a developer of any skill level so that they and others can easily examine the code at a later stage I save and once my app recompiled if I click the click me button I get the appropriate string output in the console this brings me to an interesting conclusion although the console log is updating there are no changes to the actual heading 1 on the screen of course I can update it manually by changing false to true then saving the app and waiting for a re-render to confirm that my changes have indeed happened because the previous heading of light mode is on has now become the heading that reads dark mode is on but as soon as I click the button the console log changes however the heading in the web app doesn't reflect this change why is this the case to understand this you need to go deeper into data flow and react and observe how it moves between components fortunately you'll be learning that soon great job you should now be able to demonstrate how to toggle the value of a Boolean State variable using user triggered events and how to handle multiple events on a single jsx elements imagine you were working for an online retailer that discounts prices regularly to keep stock moving sales are announced at multiple points on the website but what's the best way to keep this information up to date for example updating items individually would be tedious and time consuming fortunately it's possible to change information at a single point and have everything else update automatically to match this idea illustrates a parent's child relationship and in this video you'll explore this concept as it applies to react by the end of this video you'll be able to describe the parent child's unidirectional flow of data and you'll gain an understanding of the hierarchy of react let's start with an example of two components which will be used in the same app first is the promo component which will return the contents of the promo heading components that you will create later to build the promo component you can declare the function promo and then write a return statement inside of curly braces this statement has a div inside of which promo heading is called this is Then followed by the line export default promo to make the components accessible next let's write the promo heading component you can declare function promo heading and in curly braces type return opening parenthesis H1 tag the text 80 off sale H1 closing tag and closing parenthesis once again don't forget to export the components to make it available success you've now created the component promo which calls a function from the component promo heading to return the text 80 off sale in this example the promo component is known as a parent component and the component it renders promo heading is referred to as the child component now let's say that the discount increases to 99 off and you need to update the code to reflect this one approach is to update the text inside of the H1 tags in the promo details component that's a quick fix because there is only one change to deal with however let's explore a more complex situation this time your manager asks you to call the promo heading component in the sidebar and footer component of the web app in addition to the promo component they also want two messages displayed 99 of all items and everything must go these new requirements mean that the approach of updating the child component will not work quite as well why is that well it means that you now have to update multiple components with the same data this is not in line with the general program and principle of dry or don't repeat yourself which aims to reduce needless code replication also consider the following possibilities while entering the same text into several components it's possible you make a typing error also what if your boss decides to change the discount again it means you'll have to change the text in all the connected components once more but instead of writing the same code over and over you can change your approach you can establish a single source of truth that contains the two strings that store the values for the texts 99 of all items and everything must go this will be contained within the parent component so that any data needed can be passed onto the child components using props now let's use this approach to update the promo component first you create a single source of Truth a JavaScript object named data data is an object that will contain two properties named heading and call to action both represented as strings next you update the promo components to pass the heading and the call to action values of the data object to the promo heading component this is known as passing data from the parent to the child's component back inside the promo heading component you update it to accept data from its parent components to do this you'll need to first delete the existing H1 in the return statement and then add a new H1 for props.heading and an H2 for props.call to action now this component accepts a props object specifically it's two properties heading and call to action the values of the props object are determined in the parent component when you add to the specific jsx elements that should be rendered this was achieved when you rendered the promo heading inside the promo component here you access the properties on the data object using the regular dot notation syntax of plain JavaScript knowing this you can now code the sidebar component and the footer component in a similar way to the promo heading component remember that in react the props data always flows from the parent to the child's component and using props helps you avoid the need to change the data in several places instead you make the change at the data source the parent and the updates will be applied to the child automatically in this video you learned how the parent-child relationship can be set up so that data flows from parent to child by storing data in the parent component you can dynamically pass it to the child components without the need to update children individually in this video you're going to learn about data flow in react.js in this case data flow is in One Direction only immediately a question Springs to mind why is one-way flow in react important let me tell you this type of data flow ensures that the data is moving from top to bottom through the component hierarchy it also ensures that changes are transmitted through the system you'll cover this in more detail later for now in this video you will also learn how to showcase the use of stateless and stateful examples by focusing on data flow imagine that data is money and that money is controlled by your employer this money can be considered props this money props is passed to you and becomes your money state the money props always flow from your employer to you never in the opposite direction in react data is passed down from parent components to a child component via props a child's components can't mutate or change its props it can only read them and re-render this means that the data comes from the parent and is just consumed in the child component however if this was always the case then all you'd have in a react app is separate pieces of the Dom acting as component templates to be filled up with the data they receive while this works great there'd be almost no interactivity you've learned about passing data to a child's components using props however there's another way to work with data in react components and that data is referred to as state all the data in react can be divided into props data and States data props data is data outside the component that it receives and works with but cannot mutate State data is data inside the component that it controls and can mutate it also helps to think of it like this the props data belongs to the parent that renders the component the state data belongs to the component itself to demonstrate this let's open up vs code and work through an example I've built a new app using Create react app I have two files created app.js and child.js the app.js file defines the app components using a class definition instead of a function when it's created it initializes its state with a current date the render function then renders a component called child the child's component has a prop named message defined and its value is set as the current dates from the component State converted to a string format which includes the hours minutes and seconds of the date in the child.js file the component renders the message prop in an H1 element now when I run the app the state of the app component flows its data down to the child's component props and the H1 elements will display the current date and time well done you have now learned how children and data flows in react.js and you should also be able to showcase the use of stateless and stateful examples by focusing on data flow by now you've probably already learned about some important and useful Core Concepts in react at this point you're ready to learn how to add interactivity maintain state within a react component and explore hooks in this video you'll be introduced to what Hooks are how they can be used and why they are useful as you progress as a react developer you'll likely soon use complex components with stateful logic keeping track of State across components can become quite a task and this is where react hooks can help one key benefit of hooks is that they solve the problem of unnecessary code reuse across components let's find out how they do that hooks are functions that were introduced in react version 16.8 they let you hook into react State and lifestyle features from components let's observe an example hook specifically you'll examine an instance of the use State hook as it's the most commonly used one this Hook is used to manage the state within a component and keep track of it and it's built directly into react to use it the first thing you need to do is import the use States from react so that it's available for use the next step is to declare a state variable within a component you can provide any name to the state variable and the set State function for this example let's call the state variable show menu and the set State function set show menu if you've learned JavaScript this syntax may feel somewhat familiar to you you are probably wondering what exactly this code does well it's actually doing something that you've likely encountered before notice that the convention is to name the state variable and the setter function using array destructuring when you declare a state variable using the use state it returns a pair which is an array with two items without array destructuring the code would be long and cumbersome since it's more confusing and tedious to access the array items by index array destructuring is preferred and it significantly simplifies the code you now have a new state variable called show menu the use States then sets the initial value of show menu as false so to summarize calling the use State hook does two things it creates a state's variable with an initial value that represents the current state which in this example is show menu and it creates a function to set that State's variable value which in this case is set to show menu the function set show menu is used to update the value of show menu by passing the Boolean value to it it does not matter what name you use for the state variables you can Define them based on your component and use case the use State hook should be called at the top level of your component in this example notice that the use State Hook was used to track the Boolean State value you can use the use State hook to track any type of data It Could Be Strings numbers arrays booleans or objects for instance you can even track the number of times a button is pressed in addition to the hooks that come out of the box with react you can also build your own hooks which will let you extract custom component logic into reusable functions this is an excellent feature and benefit of using hooks the biggest benefit of hooks is the readability and simplicity that they provide to the code in this video you learn the basics on react Hooks and explored the use State hook You Now understand the benefits of using Hooks and how you can use them within your react applications consider the different modes in an alarm clock and the situations you would use them in typically you have alarm on for setting a time to wake up alarm off for when this feature is not needed and snooze for sneaking in a few extra minutes of sleep setting these modes doesn't require adding anything extra to your clock they are built-in features that can be set with a push of a button if you create this feature in a react app you could create a component named clock and then pass in the status values via props recall that props is a feature of react that essentially allows you to hold information about the UI in the browser in react you also have another way to do this by using a similar concept called state which also allows you to easily change how the component behaves in order to suit a given need by the end of this video you'll be able to describe what state is in react and why developers use it to control what is displayed in the browser from a component it helps to think of State as a component's internal data that determines the current behavior of a component and it's often used to store data that affects the behavior of a component state is important because it allows components to stay in sync with each other and ensure that your app behaves as intended for example if one component updates its state all other components that depend on that state will automatically update to this means that a component sends its state to its children by using props If the child components have their own grandchild components then the child components might have some states that they send us props to those grandchild components in react status kept in a state of variables the main way to change state is that alter these variables when a component is created it gets an initial state the state is used to initialize the component's properties components can be either stateful or stateless but what exactly does that mean to gain a better understanding let's explore an example of each first is an app component with no State defined it performs a single action which is to render the text as stateless component and then you have a stateful function component this component also renders some text but it references a variable to do so you'll explore how that works a little later for now notice the syntax used in the first line of the apps function body if you're familiar with how array destructuring Works in plain JavaScript this line of code might already make sense to you but to make things clear consider an example array called fruits which contains the three strings apple pear and Plum with its es6 version JavaScript introduced the concept of array destructuring which allows you to assign several variables from the array using a single line of code in other words you can assign Apple pair and Plum to the fruit 1 through 2 and through three variables quickly instead of one at a time with this in mind let's come back to that line in the stateful component notice that the syntax used is similar to the array destructuring example you just examined but with an interesting bit of code react.use state hooks allow developers to hook into some otherwise inaccessible functionality for example to access the state object you would use the use state to hook to better understand what is being destructured in the app component let's call a console log to the use State hook the output reveals an array holding two things the string hello and a function in this case Hello is the state value assigned to the word State variable the function is a built-in one that is not declared the function can be destructured with any name you'd like but there is a convention to follow if you set the state's variable name to be greet then the destructured state function should be set greet this is because the second destructured variable is a function that will be used to update the state of a variable so let's examine an updated version of this stateful function component notice that the set group variable is not actually run that is something that is done elsewhere later in this course you'll learn about how you can extend this code with a clickable button to update the state in this video you learned about state in react specifically the characteristics of stateful and stateless components in an app why do we use state in react because it's one way to deal with data in our react apps state is a powerful tool in react that developers use to manage data that is likely to change in an application recall that the state data is internal to the component itself this allows the components to re-render based on the changes in the state's data and present the newest updates to the user with that in mind let's explore how you can update a component with the use State hook that you encountered earlier the use State hook allows a component to Define and track state it does this with two arguments the first of which accesses State and the second of which updates it with a function for example you can use the date variable to access the date State then use the set date function to update the state to help you understand how useful we use statehood can be you're now going to explore an example that demonstrates how to use it to observe and manipulate the state of a component let's observe an app that was made for a Mediterranean restaurant called little lemon it has a header child component which receives the props and the object it also accesses the message property before it returns it and renders it as an H1 element in the parent app.js component I import The Heading component and I set the word as a state variable set to the string of eat for now I ignore the comment after the eat string in the return statement I wrap the heading component in a single div I pass the message prop of word plus and then in double quotes at little lemon all wrapped in an opening and closing curly brace you already know that an opening and a closing curly brace signifies a jsx expression which means that all the code inside of those curly braces will be evaluated as regular JavaScript the JavaScript engine takes the word eat and concatenates it to the words at little lemon thus in the browser window I get the words eat at little lemon if I want to update the value of the word State variable to something else like drink I could use the set word function directly to help me achieve this however when I say the change and run my code the app does not work this is because one can't use the state setting variable from your state directly instead of updating it directly I can update it based on a click event so I have another element called button and on click is equal to handle click I now set another function which I'll name handle click inside the handle click function definition I run set word to drink I click file save all and wait for the app to compile now when I click the click here button I get drink at little lemon to observe and update State you can usethese State setting functions and state variables using the state hook but you must make sure that you use event handling attributes in jsx syntax or some other approaches which you'll learn more about later in this video you have learned about State change basics in react including how to apply the use State syntax to observe and manipulate state in components well done as react applications grow in complexity so too can the complexity of managing States across components as a result developers need a way to manage state in their application in this video you'll learn how to describe the concept of managing States and explore some of the solutions to managing States in react applications to illustrate a scenario in which states needs to be managed consider a small react app that helps promote a healthier Lifestyle by allowing the user to monitor their food intake this app tracks a daily meal plan and the user can click on each individual meal as they've consumed it the app then updates to show how many meals that are still left to be consumed for the day the app consists of three components a root component called app.js and then two child components meals list and counter let's explore each component in a little more detail first the app component Imports the meals list and counter components and renders them on the screen next the meals list component uses use state to hook to list a day's meals which are stored in an array the array elements are saved inside the today's meals variable then the meal State variable is initialized to hold this value in other words the mealed state variable holds the array finally the counter component tracks the number of meals that a user is allowed to eat today while this coding component structure may look good there is a bit of a problem the counter component needs to get State information from the meals list component but both components are rendered by the app component in other words the meals list and the counter components are siblings and not in a parent's child's relationship this brings up a question how can you pass the state information from the meals list component to the counter component as the counter component is not a child of the meals list component let's explore a possible solution first you can simplify the meals list components by extracting The Returned value into its own components then you can work with the separate components to display different meal items so let's call this new component meals item to do this you can use the practice known as lifting State up this means that you move these States from meals list up to the app component then you can pass State through props using the meals list component as a sort of Bridge to the meal item component and then you just have to count the data available in the counter components the state has now moved up to the app component and my meals list components becomes a conduits for the state data to be passed to its destination the meal item component the question you must now ask is what is wrong with prop Drilling prop drilling is a commonly used term to describe having to pass State through props in several layers of components from the parent to the child to that child's child and so on note that if the source data changes you will have to transfer those changes across the entire prop drilled structure this complicates things because State updates go to all the child's components and their siblings which then need to be updated to reflect this state's change Additionally the problem gets bigger as the app grows and you'll potentially have a huge amount of States being kept in the app component keep in mind that most of that state is not really supposed to be in the app components that is because that state is about components such as the meal item component there's another way to phrase this problem through the Viewpoint of global state whenever I have states that might have to be used in various places in my app that's a global State issue An Elegant solution for this issue is reacts context API one way to think about the context API is that it cuts out the middleman there's no need for prop Drilling and lifting State up instead the component that needs the data simply gets it from the context API the way that this is achieved is by extracting the state into a separate file that holds the stage in context then any file that needs it simply Imports it and uses it great job you should now have a great understanding of managing States in react during this course you've probably learned a few approaches for managing States between a parent component and a child component but have you wondered how well these approaches still apply for more complex apps with multiple levels of components fortunately there are tools available to help you do just that by the end of this video you will understand how context API can be used to manage States more efficiently across multiple levels of components you'll also be able to perform basic state management using the use context and user reducer hooks found in context API by this point you're probably familiar with the practice of passing States from one component to another by using props while passing props helps to manage states it is like taking a bus and going through each stop before you get off at the end in comparison using the context API is like teleporting to your destination instantly it's a way to bypass the Redundant passing of data through multiple levels of components remember that API stands for application programming interface an API provides a predefined set of ways you can interact with some code the context API thus provides a streamlined way to work with context in react to set it up you need to add a piece of code that will be your context provider and is also where the state will be stored when a component needs to use the state it becomes a context consumer now let's examine a simple app that utilizes the context API to control state in my app.js file I'll use some code for a starter setup and you can also find this file in the additional resources if you'd like to use it to practice working with context API in the app component I have import statements for meals provider and meals list the meals provider provides context State data and gives it to all the components it wrapped inside the app component currently it wraps two components the meals list components and the counter components which are between the div tags of the return statement the meals provide a component that holds all the states which is organized with the help of the context API first I set the meals context variable using the react dot create context function next I declare the today's meals array which contains several food items saved as strings I then code the meals provider as an es6 function that accepts the children value this value holds everything that we wrapped into the meals provider component when it gets rendered inside the app component the children value is just returned from the meals provider wraps into the meals context dot provider jsx elements the meals context dot provider jsx element comes with the value attribute and this value attribute gets assigned the meals object which is the value I set to the user State variable earlier before exporting the Nils provider component at the bottom of the file I'm also setting the use meals list context variable to the react.use context call and passing it to the meals context as its single argument this makes it easier for me to destructure the meals objects from the use meals list context variable finally in the meals list component I'm accessing the context date by importing the use meals list context from the meals provider file let's break down how this component Works in more detail first I'm destructuring the meals property from the objects returned from the use meals list context call the original object has a single property named meals which holds an array of three meal strings once I destructure the meals property from that object all I have left is the array of three strings saved in the meals variable which allows me to map over the meals value where I'm rendering an H2 for each member of the meals array this code is probably more complex than most of what you have encountered don't worry if it takes time for you to understand how it works just remember the important parts that this setup gives you a nice starting point for working with the context API and lastly let's examine the counter component note that it gets the context data in the same way that the meals list component does this is the usefulness of having a centralized state store it allows me to Simply reach into the states provider directly from whatever component needs it without having to do prop drilling or lifting up state next let me show you how the use reducer hook works let's move on to the use reducer hook you can think of it as a super powered use state while they use State hook starts with an initial State the use reducer also gets a reducer function in addition to the initial state let me illustrate that with a code example let's say I have a ride share app that represents the amount of money in my wallet the initial state is a value of 100 and the action of picking up a customer increases the value while the action of refueling my vehicle decreases it I've applied a reducer function which takes in the state and the action instead of using set States like in the use State hook I use the dispatch method of the use reducer hook which accepts an object literal with a single property type set to a matching action DOT type whose behavior is defined inside the reducer function now when I interact with this app in the browser I can increase the money value by clicking the a new customer button or decrease it by clicking the refill the tank button in this video you learned how the use context and use reducer hooks can be used to manage States more efficiently across multiple levels of components in life there are rarely Perfect Solutions that suit every need for instance this concept applies when it comes to selecting a vehicle a small car is usually more fuel efficient but has limited space on the other hand an SUV can handle many passengers but Burns fuel quickly making the best choice starts with identifying your specific needs this is no different when it comes to choosing stateful or stateless component in programming by the end of this video you'll be able to describe the differences between types of state and choose the best type to suit a given need and explain how the dynamic nature of react causes structure decisions to influence complexity the distinction between stateful and stateless components is that a stateful component holds State as internal data and its state changes based on the way that the app is built often as a result of user actions a stateless component however doesn't store States and any changes must be inherited through props when deciding if a component should be stateless or stateful you can refer to the following rules use stateless components when your component doesn't need to maintain its own state in order to work use stateful components when your component does need to maintain its own state in order to work this might sound like an oversimplification that let's explore why this general rule is enough a common approach for organizing components in react is to have a stateful component as the parent which then sends its state down to several stateless components that then receive the state and render it on the screen the children components are stateless because they don't have their own State and only receive their parent State when passed down by using props keep in mind that you should never change the values of props in children components as they are immutable now that you know the basic logic let's break down a specific example of this approach in action starting with two components the app components and the child component which returns a message in the app components the use State hook defines and keeps the states that will be passed to the child's component as the props object the app component renders the child component and passes the date to it in a string format as a prop named message one thing to keep in mind and something that is often overlooked by react beginners is that a prop doesn't always have to pass state in addition to States JavaScript values and functions can also be passed to the child component it's still data but it's props data rather than State data in the child components there is an H1 element the content of this element will be the message prop that is passed into the component note that props are not changed or updated in the components as they are immutable meaning they can't be changed since the child's component doesn't store any state it is a stateless componentall of its data comes from the props passed into the component the app component stores the state which can be changed through events and functions and is therefore a stateful component in this video you learned why and when to utilize stateful or stateless components in your react apps based on your specific needs you also observe that although a stateless component can't directly Pass State it can still trigger actions that will update the state of other components you've reached the end of this module which explored the concepts of data and state in react it's now time to recap the key Knowledge and Skills you've gained module 2 gave you an overview of the concept and practical use of state and Stage management in the process you gained knowledge on how to handle events and you learned how to dynamically change content on a web page the first lesson was about Dynamic events and how to handle them in react native you now know that every time you click or Tap a button or scroll down a page it produces events in the browser and events are the process by which JavaScript interacts with HTML you learned how to identify types of events and how to handle them using components react can work with most of the same events found in HTML but react handles them differently this means that you may encounter unfamiliar errors when you run your events driven react code thus you learned about common errors associated with events and how you can deal with them you also learned about the syntax differences for using event handlers in HTML and react so that you can write event handling code using different types of syntax another important topic you covered are the different ways to embed expressions in event handlers in react these methods include using an inline Anonymous es5 function using an inline Anonymous es6 function using a separate function declaration and using a separate function expression then you moved on to learning how all the event handling Concepts work together with State styling and the use of ternary Expressions to test your skills at dealing with Dynamic events you completed an ungraded lab where you practiced event handling by building a simple number guessing game and that was the end of lesson one the second lesson was about data and events in this part of the module you learned about the react data flow hierarchy like how data flows from a parent to a child's component in react data flow is a one-way Street it starts at the root and can flow to multiple levels of nesting from the root components to the sub-component and then the Sub sub component and further down the hierarchy this type of data flow ensures that the data is moving from top to bottom through the component hierarchy it also ensures that changes are transmitted through the system next you learned about State and how it relates to component Behavior all data in react can be divided into props data and state data props data is data outside the component that it receives and works with but cannot mutate State data is data inside the component that it controls and can mutate keeping track of States across components can be difficult and this is where react hooks come in hooks are functions one key benefit of hooks is that they solve the problem of unnecessary code reuse across components for example you can use the use State hook to track any type of data It Could Be Strings numbers arrays booleans and objects the biggest benefit of hooks is the readability and simplicity that they provide to the code you also learned about some common approaches for State Management for example how context API can be used to manage States more efficiently across multiple levels of components you learned how to perform basic state managements using the use context and user reducer hooks found in context API after this you were introduced to stateful and stateless components and you learned how to choose the best type to suit a given need for example a stateful component holds State as internal data and it states changes based on the way that the app is built often as a result of user actions a stateless component however doesn't store State and any changes must be inherited through props you learn some rules to follow to decide if a component should be stateless or stateful these are use stateless components when your component doesn't need to maintain its own state in order to work use stateful components when your component does need to maintain its own state in order to work and finally you've completed an ungraded lab that tested your ability to manage States in react after completing this module you are now able to identify some common errors associated with events and use the syntax required to handle them use an event to dynamically change content on a web page explain the hierarchical flow of data in react recognize how data flows in both stateful and stateless components explain the concept and nature of state and States change and use common methods to manage States in react in the upcoming module you'll learn about working with links and routing as well as using Assets in react this should finalize your preparations for coding your own portfolio project in react excellent you've made great progress in your journey toward becoming a react developer in the early days of the web there were no true standards for design which meant that developers were often very experimental there were various designs and experiments But ultimately the web development Community settled on a few best practices and today the web is a mature medium in this video you'll learn about the basic types of navigation on websites and how the navigation process works in react now if you think about the history of web layouts and web navigation it's likely development of other great inventions throughout history for example after the Wright brothers flew the first plane in 1903 in Kitty Hawk North Carolina there was a period of a few decades where Engineers were experimenting with different designs planes with two or three sets of wings were the order of the day finally after this initial expiration stage airplane designs settled down and the rules and best practices of building airplanes were established like the development of rules of airplane construction after the experimental years of the early web the web design and development Community settled on a few accepted and expected designs the focus in modern website navigation user interfaces is on utility Stephen krug's famous book on user experience don't make me think sums up the rule the developers are following today it's your duty as a web developer and designer to follow the best practices that have already been established for example a steering wheel does not belong on a washing machine or an old style phone dial does not belong in a car in the same way you wouldn't want to confuse your website Visitors by giving them navigation that might look and feel smart but that's completely different from what they're used to so you might be wondering what is Accepted Modern website navigation and how does it work in react website navigation is the part of any website that allows you to browse through various Pages or links on that website from a single component there are several practical implementations of this user interface pattern let's explore each briefly now the most common navigation components are a horizontal navigation bar a vertical navigation menu a menu hiding behind a button and a footer navigation menu the horizontal navigation bar is often referred to as a nav bar and the vertical navigation bar is also known as a sidebar navigation the menu hiding behind a button is usually represented by an icon that has three horizontal lines and is thus referred to as the burger icon or the burger menu an alternative to this is the drop down navigation menu known as the mega menu this menu is usually also hiding behind a button and is usually used as a sub or large menu on e-commerce sites and other sites that
require many links the footer navigation menu is usually displayed as several visual columns containing links all these mentioned menu patterns can often be used simultaneously in different parts of the same page additionally a more complex navigation UI can include multiple navigation approaches in a single component you may for example have a horizontal navigation bar or nav bar with drop down menu items if you're using a smaller resolution the navigation bar displays as a burger menu icon when you click on the burger menu icon a mobile sidebar or a vertical menu appears okay so now you're familiar with some of the navigation types that are available in your react apps let's explore how they are implemented to load different pages if you compare the navigation of websites built with reacts against HTML and CSS you'll likely find no visual difference while visually everything looks the same in the code react deals with navigation between Pages differently this is because the entire app is loaded inside a single div so you're not actually visiting different pages like you would with hyperlinks and HTML files instead the content of that single div is controlled by react and it's based on changes to the virtual Dom it either updates the existing view or loads a completely new view giving the user the impression of visiting a completely different URL recall that with HTML developers can use a list to make a navigation menu each list item contains a hyperlink to an HTML file then some CSS to style the menu like the display inline property to make the list display horizontally to help illustrate how navigation between Pages works with react think about how the buttons on the inside of an elevator work pressing the button will take you to the selected floor similarly each link on a website takes you to a different page if you click on it if however you're in a react elevator it's as if the elevator never moves instead when you press a button in this react elevator the entire construction of that given floor is injected into a single floor of this impossible building that means that react by itself only takes care of the visuals of a single page that has no notion about navigation between Pages however this functionality is not available to developers from the react Library itself in order to achieve this illusion of a multi-page website you need to add the react router library to your react projects once again you add this using the import statement and you'll learn more about how to do this soon well done in this video you learned about the basic types of navigation on websites and how the navigation process works in react by the end of this video you'll know how to install the react router library on your machine which gives you more tools for setting up navigation in your apps you also practice using this library to create a basic navigation for a web page let's examine a starter app that I've already prepared it has two components which are named home page and about me currently homepage is written to display the header text welcome to my site on the page the about me component displays the header text about me both components are children of the app components notice that home page and about me are both imported into the app component and referenced using anchor tags however with the default react Library these anchor tags won't work as expected this is because react can't imitate multi-page websites however I can make this possible with the help of another Library known as react router as you may have guessed from the name react router gives you more control over the routing of components I'll install it using the npm command npmi react Dash router Dash Dom at symbol 6. to confirm that it's available I inspect package.json and find the new entry in the dependencies which is react router Dom 6.3.0 now that react router is installed I'm ready to make my broken links work first I'll access the index.js file and enter a statement to import browser router from react router Dom once I've imported it I need to wrap the app.jsx element inside browser router by placing it between the browser router tags with that done let's return to app.js here I need to import routes and route from react router Dom I also need to replace the child jsx elements with some different code home page becomes route path equals and then forward slash between double quotes this is followed by element equals and then the home page jsx element inside of curly braces note that the route tag is self-closing and has no children inside for about me I add a similar line but I'll add about Dash me after the forward slash these lines will also be encased between routes tags if I go to my browser and type the exact link on one of the routes for example slash about me I'll get only the about me component showing under the navigation however if I remove the about me from the URL in other words if I open the root route that is represented with a forward slash then it'll show the text from the home page component under the navigation bar notice that I'm grouping all the routes by wrapping them inside the routes jsx element also note that the nav tags are outside of the routes tag meaning that navigation is outside the routes finally I need to replace the anchor tags with react router links this allows the correct component to be loaded when the link is clicked rather than simply refreshing the page so in the app component the anchor tag for home page becomes link to equals and then forward slash between double quotes this is followed by class name equals and then nav Dash item in double quotes for about me the change is similar except that about Dash me appears after the forward slash I also need to import link from react router Dom and save my changes now when I click on either of the navbar links the correct content loads in the browser in this video you learn how to install the react router library and utilize some of the key functionalities to create a navbar now you're ready to learn about more efficient ways for users to navigate your apps by now you should be familiar with the concepts that react dynamically changes web page content for example you discovered that when a react website changes from home page text to about me text it isn't going to a new page it's rendering one component instead of another while this is useful you need to give react very specific instructions about what and what not to render and when you have components that are responsive to events such as clicks this can add another layer of complexity fortunately there are several approaches for writing the logic to ensure that this process goes smoothly and requires less work from you by the end of this video you'll have a high level understanding of conditional rendering and know how to set it up using ternary operators recall that state is a component's internal data which that component can control or change as opposed to props which the component receives but cannot alter in an app you can render components conditionally based on whether a specific State data has specific values in other words when you write the rendering logic in the main app component you'll need to reference the state of the other components for example suppose you have a component that contains code for a button that shows a sidebar the button controls the state of the toggle sidebar variable which is set to false when the button is clicked the state of the toggle sidebar variable is updated to true and the sidebar component is displayed to make this possible react works with conditional Concepts and syntax that are already available in JavaScript for example recall the conditional if-el statement in JavaScript developers use it to run code conditionally based on whether something is either true or false to illustrate conditional rendering in action let's first consider an example productivity app based on the device's date at the time of access the app displays one of two messages four workdays the messages get it done for weekends it displays get some rest as a developer there are a few ways you can achieve this functionality in react but in this video you'll focus on using the ternary operator to write simplified if else conditions you start by creating a component called current message this component uses the built-in date function in JavaScript along with the get day method to store the day of the week as a number where 0 represents Sunday and 6 the following Saturday next you create the two components that each hold one of the messages to be displayed let's name these components work days and weekends the current message component needs to render the appropriate components based on the value returned from the get day function call let's set up the conditions to make that happen recall that the ternary operator takes three commands first is the condition which in this example uses the logical and operator the condition checks if the value stored in the day variable is greater than or equal to one and less than or equal to five then the question mark symbol followed by the expression to execute if the condition evaluates is true in this example the component work days is rendered next is the colon symbol which represents the code to be executed if the condition evaluates as false and if this happens the component weakens is rendered using the logical and operator in the condition means that both Expressions have to return true in order to render the workdays component otherwise the weekend's component will be rendered while using the ternary operator is a common pattern that you'll see in react code if you are new to react it may be difficult to understand what's happening so let's refer to a simpler version that uses Boolean values in this example component is it summer yet the variable summer is set to a value of true a ternary operator Returns the expression after the question mark if they condition before the question mark is true otherwise it Returns the expression after the colon symbol so since the variable summer evaluates to True rendering this component will return the string let's go to the beach in this video you learned about conditional rendering and how to implement it within Dynamic apps by using ternary operators by the end of this video you'll be able to describe the various approaches to conditional rendering in react and you'll be able to use the if else statements and ternary operators to render components conditionally I use the create react app to build a starter react app I'll go through the code in this customized starter app to demonstrate some conditional rendering and practice the goal of my app is to use the local computer's time and based on the returned values I'll put various messages inside the same return statement all wrapped in a single div element specifically I want to quote a small app that displays a message for a given workday and if it's morning time ask the user if they've had their breakfast yet I start my app component code by declaring a Time variable and assigning the call to the date Constructor to it I then set the day variable and I use the built-in to Locale string function that exists on the date object to specify the Locale as English us I also specify the weekday value as long which displays the days as full words such as Monday Tuesday Wednesday and so on next I declare a morning variable that stores a Boolean value based on whether the current time is greater than or equal to 6 and less than or equal to 12. finally I declare a Day message variable but I'mnot assigning any value to it yet to generate a dynamic message I use an FL statement passing it the value of the day variable I also make all the characters in the day variable string lowercase with the help of the built-in to lower case function based on the values stored in the day variable I then assign a specific string to the Day message variable for example if it's a Monday the Day message variables towards a string that reads happy Monday if it's a Tuesday the string reads Tuesday four days to go after I've covered all the possibilities from Monday to Friday I add the L statement with a string value for all the other possibilities the string reads stay calm and keep having fun this brings me to the return statement in the return statement I have a single heading H1 and inside of it I'm accessing the string values stored inside the Day message variable additionally I use a ternary operator to conditionally evaluate the morning variable if true I output a string that reads have you had breakfast yet this string is placed inside the heading 2 element it falls an empty string will be displayed notice the output of this code happy Monday if I change the get hours value from 12 to 19 and save my code notice that a new message is displayed underneath the heading that reads have you had breakfast yet that's all it takes to build quite a dynamic component that conditionally renders various kinds of strings in its return statement in this video you learned about the various approaches to conditional rendering in react using the if else statement and ternary operators to run their components conditionally by now you should be familiar with creating react components and adding text to them but text will only go so far in an app and users expect things like images video or audio for a more complete experience fortunately you're here to learn about assets and how to use them to liven up your app by the end of this video you'll know what assets are and how developers keep them organized in react you'll also learn some of the common ways to import asset files to be used in your react apps let's begin by making sure you fully understand what developers mean when they mention the term assets in react assets can be things like images style sheets fonts media files or basically any file that's needed by your app at runtime in other words assets are all the files that your react app needs to have access to in order to work as intended for example you might code your app to display specific images or use certain fonts but if you run your app without these being available it might exhibit unexpected Behavior such as displaying a placeholder or using a default font that's why it's important to keep assets easily and readily available to your components a common way to do this is to add an assets folder inside of the source folder and keep all your apps assets there some assets can also be placed inside the public folder for example in the default react installation you'll find that some images such as favicon and Logo 512 are stored there by default the general rule for asset storage is that if your app can compile without it you can keep it in the public folder for instance favicon is in the public folder because no component depends on it in other words react doesn't need to use the fabicon file to compile all the components into an app that will get served in your local browser while you're building your app however suppose you have an image that needs to be imported into one of the app components then it's best stored in the assets folder now you're familiar with the concept of Assets in react let's explore how to use assets suppose you're a developer working on an app that helps people adopt animals in their local area you have built most of the app's components but you are waiting on the adoption center to send you pictures of the animals that are looking for a new home in preparation for this you create the assets folder in the react application the pictures arrive and you place them inside the assets folder so they can be added to your components to add an asset file to a component you first need to import it this can be done with an import statement for example suppose this component will display a picture of a cat you type the keyword import followed by the name you want to give your asset you can call this almost anything you like but it's best to stick to something descriptive that describes your assets for example cat then you type the keyword from followed by the path to your assets in this case it's a file named cat.jpg located in the assets folder the next step is to create the function and write a return statement inside the return statement you use the image tag and then set the source attributes to reference the asset's name which is Cat in curly braces alternatively instead of the asset name you can reference the path to the assets folder relative to the component you can do this with the require keyword as well as curly braces that encase the jsx expression and act as delimiters it's important to know that with this method you no longer need the import statement this is because you're using the required syntax right inside the jsx expression that's assigned to the SRC jsx attribute in this video you've learned what assets are in react and the best practices for storing them in your project folders you've also learned some of the most common ways of importing and using image Assets in your react apps in this video I'll demonstrate various ways of displaying images you'll learn three different ways to display an image in react tab specifically by using the import statement using the require function to set the file path or by providing an image URL to demonstrate how you can work with embedded assets I've created a basic app called embedded assets in my apps Source folder I added the assets folder which also contains an image folder notice I've added one jpeg image to the images folder named Central Park to view the code of the app component I click on the app.js file notice that the starting code of my app component just render some text that describes the task at hand which is to display three images with some styling for this I'm going to demonstrate the three distinct ways to import images in react the first way is to use the import method and I want to demonstrate how you set a name for your imported image to import the image file Central Park I type import rooftops and then dot forward slash to provide a relative path to the file enclosed in double quotes in this example my file is in the images folder inside the assets folder next I'll render this image as an image tag in my code I use the height attribute to limit the size of the image by making its height exactly 200 pixels I'm setting the source attribute to the value of rooftops which contains the path to the image file finally for best practice I add an ALT attribute with a basic description of the image I save my file and notice that my image now displays in the browser okay so that's one way to import an image using the import statement the second way to import an image is by using the require keyword to do this I create this image with an image tag like I did before again I limit the size of the image by making its height exactly 200 pixels but this time I set the source attribute to require I pass in the relative path of the image to the required function the path is passed into the string data type so that's why the path is enclosed in double quotes once again to finish my image code I add a description of the image to the alt attribute I save my code and the second image now appears notice that with this approach I don't have to import the image I just require it and provide the string with the relative path to the image now I'll demonstrate the third way to import an image asset by loading an image file hosted on the internet instead of a local file this time I want to display a random image URL from a photo hosting website to do this I create a variable by typing const then the variable name random image URL then I use the equals operator followed by the URL for the random image I can now add my third image element inside the return statement to do this I add random image URL to the source attribute so there you have it the three different ways to use image Assets in a react component since the introduction of the smartphone and high-speed Wi-Fi we now enjoy creating consuming and sharing video and audio content daily on our devices by the end of this video you'll learn how react developers use audio and video assets within an app you'll also explore how to find suitable react packages to use when working with audio and video files let's begin by exploring a method to load a local video asset into your react app using just HTML you can use the readily available HTML5 video tag to load a local video asset to your react app like loading an image or any other kind of asset file you can just declare a variable somewhere above the component's return statement and then add it as a jsx expression to the SRC attribute however this approach might not work as easily with some major providers of video content such as one of the several social media and social video sharing platforms in that case you have the option of rolling out your own Solutions this may be a bit more involved than just adding a video tag to an app it might depend on the specific instructions on how a given social media platform recommends that you embed their video and audio assets into websites very often you'd get a code snippet that you can copy and paste however a specific implementation might be slightly different because you would for example like to add it as a separate react component you might be wondering why do you want to prepare it as a separate component one of the reasons is that you'd be able to easily switch one video with another by passing The Unique ID of a given video as a prop you can then control the video output that way so far you've learned about two ways of adding videos to your apps first method involves just serving a local video using the video element and the second method is using embedded third-party videos there's another approach you may consider namely using a third-party npm package to streamline the process of adding videos to your app the npm package ecosystem is huge if you visit the npmjs.org website you'll find millions of various packages to make it easier on yourself type react video in the search bar of the npmjs.org website to find some of the frequently downloaded npm packages to choose the right one you might want to check the frequency of updates a package that's frequently maintained and has many contributors is usually a sign of a solid package to use additionally make sure to check the package's GitHub page finally you can also perform an internet search for the package name these actions will help you make an informed decision on which package to choose an example of a package that fits all these criteria is the react player package visit the packages GitHub URL at github.com forward slash cook Pete forward slash react hyphen player you'll find that the react player package has over 6 000 Stars about 115 contributors and that it's regularly maintained so what is the meaning of the Stars when a developer visits any repository on GitHub they can show their appreciation of the project by clicking the start button this is known as starring a repo this can be done for various reasons but if a project has been starred many times that's usually an indication of its popularity these are all good signs so if you want a custom open source solution for your video needs in react you can choose this package or a similar one great job you now have a general idea of how to use audio and video Assets in a react app and how to find packages using npmjs.org and github.com by the end of this video you will know how to install the react player package and then use it to render a media player in react apps you'll also know how to apply several common settings in react player such as automatic playback and the starting volume let's examine another app that I've created using Create react app currently it's pretty basic and only renders an H1 heading that reads react player example let's make that heading True by adding in a video player the first step of this process is to install the react player module and the second step is to import it into my app component to install the module I'll run the command npm install react player once it has finished installing the module becomes available to any component in my project but only if I import it so I'll use the command import react player from followed by react player in double quotes now I'm ready to add the imported react player package as a component and render it from the app component I also want to preset a few settings for the player specifically to ensure that the video doesn't play automatically when the page loads and to have the starting volume at 50 percent of the maximum to do that I add some attributes to the react player tag playing equals and then false in curly braces and volume equals followed by 0.5 in curly braces for a complete list of settings you can refer to the react player's GitHub documentation you may have noticed that the react component also contains the line URL equals vid URL this refers to the web link for the video which hasn't been set up yet so let's add that link to the vid URL variable now that everything is set up I'll click file and save and then verify that everything works as expected in the browser I can play the video use the built-in controls and the video starts at half the volume so it seems that everything is correct finally you can find the Project's GitHub URL at github.com Cook Pete with a Capital C and a capital P slash react dash player this page contains an about section on the right in which you'll find a link to the live demo on the linked page you can select from several video sources and change the video settings such as playback speed light mode loop and more if you would like to know more about the react player I recommend experimenting with these settings and Consulting the Project's GitHub documentation in this video you learn how to install and use the react player package and change common settings for the react player you've reached the end of this module on setting up navigation updating and using Assets in react.js it's now time to recap the key lessons you learned and the skills that you gained in the module you explore the basics of single and multi-page navigation as well as the conditional rendering or changing of content in response to user status or choice the first lesson covered linking and routing of components in react for navigation website navigation is the part of any website that allows you to browse through various Pages or links on thatwebsite from a single component and in modern website navigation the user interface is all about functionality you learned about the most common navigation components like the horizontal navigation bar or navbar but of course most websites have more complex navigation UI that include multiple navigation approaches in a single component like combining a horizontal nav bar with drop down menu items you've learned that there's a key difference between the navigation of websites built with react versus those built with HTML and CSS with react powered web pages called single page applications or Spas the entire app is loaded inside a single div so you're not actually visiting different pages like you would with hyperlinks and HTML files that's because a single page application or Spa comes with its own special implementation of anchor tags and links that give the illusion of loading different pages to achieve this illusion of a multi-page website you learn that you need to add the react router library to your reacts projects and you practice using it to create and Implement a basic navigation route for a web page in this lessons on graded lab you used code from the lesson item titled the nav bar and you had to add another link to the existing code after this you learned about conditional rendering which is necessary for react to be able to dynamically change web page content as part of this section you learned how to set up conditional rendering using ternary operators to write simplified if else conditions the second lesson focused on using Assets in react here you learn the assets of files that your app needs at runtime like images stylesheets fonts video or audio you learned how developers keep assets organized in react and about some common ways to import asset files a common way to organize assets is to add an assets folder inside of the source folder and keep all your app's assets there some assets can also be placed inside the public folder the general rule for asset storage is that if your app can compile without it you can keep it in the public folder in this part of the module you learned how to use embedded assets and about the advantages and disadvantages of embedding assets as well as about the trade-offs inherent in using asset heavy apps and in the first ungraded lab of this lesson you learned how to add an image from the assets folder that had already been added to the SRC folder what's more you also learned more about using audio and video Assets in an app here you learned how to find suitable react packages to use when working with audio and video files and you learned about three ways of adding videos to your apps by serving a local video using the video element using embedded third-party videos or using a third-party npm package to streamline the process of adding videos to your app Additionally you learned what you can do to help you decide what package to use you should check the frequency of updates check the package's GitHub page and perform an internet search for the package name to help you become familiar with using such packages you learned how to install a react player package and use it to render a media player in a react app and you learned how to apply common settings like automatic playback and starting volume your final ungraded lab of the module was to finish an already built app with the user interface that allows visitors to play bird sounds by pressing buttons now that you've completed the module you should be able to describe navigation design in react with a focus on single and multi-page navigation create and Implement a route in the form of a nav bar demonstrate the conditional implementation and rendering of multiple components explain the folder structure of a react project in terms of embedded or referenced assets demonstrate how to manipulate image assets using reference paths and use media assets such as audio and video with react congratulations you've now covered most of the basic concepts in react and you're ready to complete this modules quiz and review the additional resources for this module there's just one more module left before you complete this course in the next module you'll apply your knowledge by completing a mini project in react by building a calculator app in this course you learned about the basics of working with react let's take a few moments to recap the key topics that you learned about in the opening lesson you received an introduction to react during this introduction you learned about react became familiar with how reactors used in the real world and you learned how to make the most of the content in this course to ensure that you succeed in your goals you then moved on to the next lesson in which you learned about react components in this lesson you learned how to explain components their architecture and how they are rendered create components and update them using jsx describe how folders are structured in a react project and how this benefits development and you then demonstrated your knowledge of how to import components in the next lesson you explored how to use components in Greater detail this means that you can now declare functional components with props and pass them to another component use jsx to add styling to components save Styles so that they can be reused later and embed JavaScript expressions in attributes next you began the second module which was focused on the roles of data and states in react in the first lesson of this module you learned about Dynamic events and how to handle them you can now identify the most common types of events use some common event handlers in your code use different types of syntax to write event handlers and you demonstrated understanding of the concept of user triggered events you then learned about the relationship between data and events as a result you can now describe how data flows between parent and child components and explain the concept of State in react and how it is managed you will also introduce to Hooks and know that you can use them to extend the functionality of state and you are able to identify some common use cases for stateful and stateless components in the third module you were introduced to navigation updating and Assets in react by completing the first lesson you can now identify the basic types of navigation on websites create a basic navigation route with a react router Library explain how components can be rendered conditionally use several different approaches to set up conditional rendering logic in the final lesson of this module you explored Assets in reacts and how to use them you can now explain what assets are and the best ways to store them use assets that are embedded in data files and use audio and video Assets in your components you've reached the end of this course recap it's now time to try out what you've learned in the graded assessment good luck I'll now demonstrate how you can use reacts to build a simple calculator app that is able to perform addition subtraction multiplication and division operations I have some code for this app already written however because it's incomplete it encounters problems when it compiles the first problem is that use ref is not defined so I'll import use ref to fix that issue and then press Ctrl s to recompile the second problem is that the use State Hook is not defined so let's import that as well and when I recompile once more the problems should be resolved so the structure of the app is there but currently it can only perform addition so I need to add the other functionalities let's start by examining what I have for the plus function it runs the prevent default function on the receive event object and then it invokes a function for updating the state variable I can use this as a template for the other functions I will write so I will copy and paste this code into the functions I've started in the minus function I update result plus number to result minus number so that it subtracts whatever is in the input in the times function I update the same snippet to result asterisk number and finally for the divide function I use the Divide operator or forward slash to make it result slash number now I also have two functions called reset input which sets the input value to zero and resets results which sets the result value to zero as well reset input needs to run prevents default and I follow this with input ref.current dot value equals zero for reset results I use a different approach I have it run prevent default but then instead of setting the value to zero directly I have it multiplied the previous value by zero I type this as set result followed by an arrow function that directs prevval to return Prevail times zero now if I go to the return statement of the app component I find that I need to add the value of the current total as a jsx expression so I type result I can condense this code to a single line so I'll do that next I have to add buttons to trigger the functions that I've written I paste in five button components that I've written previously Each of which is bound to an on click event this component is written for the plus function so that is already taken care of I'll update the other button components by changing the function that is called for each one as well as the text displayed on the button so the second button calls the minus function the third button called times the fourth chords divide the fifth one calls reset input and the final button calls reset result now I press Ctrl s to save my changes I'm ready to test out my app so I type 2 in the input fields and then click on the add button the result changes from zero to two and then adding two again updates it to four next if I type 1 and then click on subtract the result becomes three if I enter 10 in the input field and click on multiply I end up with 30 as the new result and now if I type 6 and click on divide I get a value of 5. finally I can click reset inputs to set the value in the input field to zero as well as click reset results to clear the results and bring it back to zero and that's it my code is complete and my app works as per the requirements you've reached the end of this react Basics course you've worked hard to get here and developed a lot of new skills along the way you're making great progress on your react Journey you were able to demonstrate some of this learning along with your practical react basic skill sets in the lab project following your completion of this course in react Basics you should now be able to create a simple calculator app your calculator should be able to perform the four basic mathematical operations addition subtraction multiplication and division the lab not only gave you the Practical experience you needed but it also has another important benefit you now have a fully operational calculator built in react that you can reference within your portfolio this serves to demonstrate your skills to potential employers and not only does it show employees that you are self-driven and Innovative but it also speaks volumes about you as an individual as well as your newly obtained knowledge so what are the next stepsn in this course you were introduced to several key topics that can help you on your Learning Journey you probably realize that there's still more for you to learn as you continue through the program you will develop your skill sets so if you found this course helpful and want to discover more then why not register for the next course and once you've successfully completed all the courses in this program you'll receive a certificate that you can use to validate your achievements the certification can also be used as a progression to other meta role-based certifications depending on your goals you may choose to go deep with Advanced role-based certifications or take other fundamental courses once you earn this certification meta certifications provide globally recognized and Industry endorsed evidence of your technical skills thank you it's been a pleasure to embark on this journey of Discovery with you best of luck in the future so you're ready to start programming with JavaScript but before you can begin developing projects with JavaScript you need to set up software called vs or Visual Studio code vs code is a code editor that developers use to write their JavaScript code by the end of this video you'll be able to install vs code node.js and the code Runner extension on your Windows operating system start a new Javascript file in vs code and run the file using coderunner extension and explain what console.log does in JavaScript let's begin by exploring the vs code download and installation process first I open a search engine in my browser and search for the term vs code or Visual Studio code I click on the first link which directs me to the official website at code.visualstudio.com this link redirects me to the site's homepage on this home page I select the download for Windows button a message appears on the vs code website which states thanks for downloading vs code for Windows I can then track my download progress in my browser once the file is downloaded I click the file to begin the installation process the license agreement appears I read through the agreement and select next I then accept the default installation destination and the start menu folder I also select the following additional tasks create a desktop icon add open with code action to Windows Explorer File context menu add open with code action to Windows Explorer directory context menu once I've selected these additional tasks I click next now that I have configured these tasks I select the install button once installed I then check launch Visual Studio code and select finish my visual studio code program then appears in a new window on the get started page from here I click the bottom most icon on the very left of the vs code window to open the extensions panel once in the panel I type cord Runner to search for the code Runner extension I then select and install this extension from the search results while the extension installs I return to my browser and search for node.js I access the file from the official site at nodejs.org and click on the direct download link making sure to install the windows version a pop-up appears on screen to track progress of the download once the file has downloaded I select open file to open the node.js setup wizard I then select next and accept the license agreement I then click install to begin the installation process once the installation process has completed I click the Finish button to close the setup wizard I then return to vs code where the code Runner installation process is complete to confirm that code Runner is installed I can check for the following message on screen which states this extension is enabled globally just to the right of the code Runner tab is a stripe for the files I double click this to open a new file I then click select language and choose JavaScript from the list of languages I can also type JS in the search bar to narrow my results next I close the code Runner Tab and click on the extensions icon to toggle off the extension sidebar I then click on The View Tab and select the terminal option to open the terminal that I closed earlier I need to clear the terminal I can do this by typing clear and pressing the enter key next I hover over the terminal's output tab I then click hold and drag it to the right in order to dock it on the right hand side of the vs code window now I close the terminal again the output should remain on the right hand side of the screen I can also adjust the width of the output by dragging the split to the left or right finally I type some code into the tab on Title 1 as follows console.log followed by a pair of parenthesis in which I type hello world in single quotes to run this code I click the play icon Ican also use the shortcut keys Ctrl alt n the words hello world appear in my output other information also appears but hello world is all I need to focus on for now and that's it I've successfully set up vs code with code Runner you now know how to install Visual Studio or vs code node.js and the code Runner extension on your Windows operating system you can also start a new JavaScript file in vs code and run the file using coderunner extension and you can explain what console.log does in JavaScript great work hello and welcome to this Advanced react course that continues from the react Basics course in this specialization throughout this course you'll learn more advanced react Concepts let's take a moment to review some of the key Concepts and skills that you'll learn in the first module you'll start by learning how to render and transform lists in react and work with forms in this process you will be introduced to the map method to perform transformation operations and rendered lists of components then you'll learn about identifiers called keys which are an integral component in list transformation in react you'll dive into controlled components with a focus on creating a controlled form component in react and implementing your own feedback form and you will revise what you know about props and state exploring react context as a viable alternative to local state in certain situations you can also look forward to working with practical examples using the context application programming interface or API to manage Global state in your react apps in module 2 you'll gain an in-depth understanding of hooks this includes learning the use and purpose of react hooks the rules for using hooks in react and how to build custom hooks in react for example you will learn about the purpose of the use State use effect and use reducer Hooks and how to use them in the third module you will be introduced to a variety of more advanced concepts related to jsx as used in react such as components and elements you'll explore the types of children within jsx discovering the importance of component composition and the children prop how to manipulate children in jsx and the spread operator in react you will also be introduced to the process and purpose of creating higher order components and render props starting with an introduction to cross-cutting concerns another important topic that will be covered is performance in your react apps as well as testing and debugging your application plus you'll learn about writing integration tests using the react testing library with a focus on testing the behavior of forms and exploring practical applications of tests during these modules you'll work through practical examples of theoretical Concepts based on a restaurant called little lemon and encounter activities to test your Knowledge and Skills and in the last module you'll have the opportunity to demonstrate some of your learning and your practical Advanced react skill set in a lab project where you code your own portfolio app you'll also demonstrate your knowledge of these topics in a graded assessment well I hope you're as excited as I am to work through this react Advanced course let's get started the keyword react is is more popular than words like orange juice and and renewable energy and so it has been a framework that is very widely popular and it's something that a lot of jobs now require when they're hiring new Engineers [Music]

my name is murtara I'm a software engineer at meta based in the Seattle office so just about everything I've built in my career at meta has been built in react so you know if you're using any of the meta products whether you're using Facebook or Instagram most likely the buttons and the menus and and the clicks that you're making are all events and components handled by by a react framework and that has been my career at meta has been developing these kinds of components so whether you're using it on a web if you're going and posting a photo or if you're making a comment all of those interactions are powered by by react components behind the scene well I think personally when I I first discovered react I was like oh my God this is so cool and it just made building web applications so much easier so it really simplified my job as an engineer to to write using this framework and and it's it's very intuitive it's much less error prone so if we look at the trends we see in 2018 react actually rose up and and exceeded what previously was the most popular web framework which was known as jQuery and and react became the most searched keyword so it makes sense for it to replace some of these older Frameworks that are not keeping up with the speed of the industry so so the main language that's used to create react components is Javascript and they're actually different different flavors of JavaScript that can be used with react so at meta we use a flow flavor of of JavaScript and that allows us to ensure type safety throughout the use of developing react components but there are other ways that react components can be built perhaps a popular way that is common in the industry is using typescript and besides these different ways to use react components on web you can actually user act to develop mobile components on on like Android and iOS and most recently reacts is releasing a way for developing VR components like virtual reality where where people can use these same Frameworks consistently that are used in web and mobile to develop virtual reality applications the idea is to simplify it and and allow developers to create complex virtual reality applications but Leverage The Simplicity and friendliness of react and that's what has given the motivation to to create these different Frameworks of react across different segments of the industry at this point it's an integral skill that just about every job and every application you build will probably require so having this knowledge will will really help you through your career and it's going to also make your life easier to learn how to use such framework so my advice to you as you venture into this world of react is to to stay consistent it may at first seem a little complicated or overwhelming or some things may not make sense but just power through it it will make your life a lot easier to to learn these principles they'll make you much more attractive to Employers in the future and your ability to produce scalable web applications will be much better with the use of this framework so keep going and and don't let some of these uh confusing parts of react slow you down so you're ready to start programming with JavaScript but before you can begin developing projects with JavaScript you need to set up software called vs or Visual Studio code vs code is a code editor that developers use to write their JavaScript code by the end of this video you'll be able to install vs code node.js and the code Runner extension on your Windows operating system start a new Javascript file in vs code and run the file using coderunner extension and explain what console.log does in JavaScript let's begin by exploring the vs code download and installation process first I open a search engine in my browser and search for the term vs code or Visual Studio code I click on the first link which directs me to the official website at code.visualstudio.com this link redirects me to the site's homepage on this home page I select the download for Windows button a message appears on the vs code website which states thanks for downloading vs code for Windows I can then track my download progress in my browser once the file is downloaded I click the file to begin the installation process the license agreement appears I read through the agreement and select next I then accept the default installation destination and the start menu folder I also select the following additional tasks create a desktop icon add open with code action to Windows Explorer File context menu add open with code action to Windows Explorer directory context menu once I've selected these additional tasks I click next now that I have configured these tasks I select the install button once installed I then check launch Visual Studio code and select finish my visual studio code program then appears in a new window on the get started page from here I click the bottom most icon on the very left of the vs code window to open the extensions panel once in the panel I type cord Runner to search for the code Runner extension I then select and install this extension from the search results while the extension installs I return to my browser and search for node.js I access the file from the official site as nodejs.org and click on the direct download link making sure to install the windows version a pop-up appears on screen to track progress of the download once the file has downloaded I select open file to open the node.js setup wizard I then select next and accept the license agreement I then click install to begin the installation process once the installation process has completed I click the Finish button to close the setup wizard I then return to vs code where the code Runner installation process is complete to confirm that code Runner is installed I can check for the following message on screen which states this extension is enabled globally just to the right of the code Runner tab is a stripe for the files I double click this to open a new file I then click select language and choose JavaScript from the list of languages I can also type JS in the search bar to narrow my results next I close the code Runner Tab and click on the extensions icon to toggle off the extension sidebar I then click on The View Tab and select the terminal option to open the terminal that I closed earlier I need to clear the terminal I can do this by typing clear and pressing the enter key next I hover over the terminal's output tab I then click hold and drag it to the right in order to dock it on the right hand side of the vs code window now I close the terminal again the output should remain on the right hand side of the screen I can also adjust the width of the output by dragging the split to the left or right finally I type some code into the tab Untitled 1 as follows console.log followed by a pair of parentheses in which I type hello world in single quotes to run this code I click the play icon I can also use the shortcut keys Ctrl alt n the words hello world appear in my output other information also appears but hello world is all I need to focus on for now and that's it I've successfully set up vs code with code Runner you now know how to install Visual Studio or vs code node.js and the code Runner extension on your Windows operating system you can also start a new JavaScript file in vs code and run the file using coderunner extension and you can explain what console.log does in JavaScript great work you need to lay things out and it's very difficult if you don't have CSS grids take one and [Music] oh I'm having fun now [Music] I'm Benedict Hobart I'm a front-end engineer at meta bootstrap is a very popular CSS framework CSS Library used to help build help quickly build websites it has a lot of Primitives that you'll commonly need when styling buttons or styling rows or styling grids and then there's grids which is a CSS layout spec that allows you to lay items out in a grid which was previously a very complicated task I know it's ansible um but you know you can say I want this item to be at this part of the grid and in this row and in this row and uh helps you make more responsive apps um as well I learned about it years ago I think probably in 2017 on 2016 and there is a whole class of layouts that are much more easily solved by grids um than by you know previous layout uh layout approaches you need to do a lot of computation in JavaScript to know the widths and Heights of images and where to put them and how and how to get them to layout at the screen but if you've got CSS grids it's just one line of code to then get things to lay out in a performant way that's that's responsive and reliable generally you put a bunch of different layouts together when you're building a website so you might use a grid spec in one spot say in a table based layout that you want to be responsive but then you might use another layout that you know contains a great deal and wraps it and it's important to learn how to layout items so you can build an app and Define its layout in a in a in a flexible way so being able to say I want this to appear at the bottom of the screen when it's a footer my repair is a tab bar at the top of the screen I think there's a number of reasons you want to learn how to do it I think most websites could be reduced to a grid knowing one layout and how one layout Works in detail allows you to take that knowledge to easily learn future layouts that you might want to build starting off with one and getting a good grasp at that is a really good foundation to let you learn other layout engines and if you you know ever want to move Beyond web into IOS and Android they've probably got their own layout engine so they use I hope you develop a good understanding of how to use grids in your app and how it can be useful I hope you understand that it's just one thing in you know a broader set of layout specs that you can use in the browser and I guess more importantly I hope you develop a strong Foundation here that you can take into your great career and learn other layout specs and how to build the next generation of apps how many times have you found yourself browsing apps maybe you've used an app to order food scrolling through different menus helping to find what you'd like well lists like this are common to almost every app which is why it's important that you know how to manipulate them in JavaScript chances are you'll need to transform various elements before displaying the final list to your users so in this video you'll learn how to use the map method in JavaScript to transform lists of data let's imagine that a restaurant called little lemon would like to display a list of its popular desserts remember that a list is a simple collection of elements which translated to JavaScript terms represents an array these arrays can contain any type of data but the most common type you'll encounter per element is an object now say little lemon uses an external service to query a list of its most requested Desserts by users however when fetching data from a third party like this you are generally provided with more data than you need and the data will be provided in a format or shape that is determined by the third party this means that you may need to write more code to handle the data in order to retrieve just the information you need that's where the map method comes in as a way to ignore everything that you do not want displayed on screen and extract only the data that your users care about so let's explore how to transform this list of dessert items using the map method in JavaScript in JavaScript when you deal with lists of items of any kind you need to use the array type JavaScript offers different methods that you can use with arrays to perform various operations in order to perform a transformation operation you must use the map method coming back to little lemon imagine you have a list of its top requested desserts encompassed in a variable called Data each dessert has the following properties ID title image description and price in this case you would like to show a very simple list of desserts with a property called content which you can create by merging together the title and description and the price of the delicious dish first I'm going to define a new variable since the map method always returns a new array let's call this new array top desserts next I'm going to apply the map method to the original data array for now I'll return the data as it is so you can examine the basic structure of a map transformation I would like the new items to have two properties the first is content which is going to be a combination of title and description let's use a dash character to separate the two secondly there's the price which I will pass as it is last I will console log the result to demonstrate that the new list I have created contains the shape or format that I originally intended and here's your transformed list you just learned how to transform data in JavaScript with a map method this is a simple yet powerful tool you will find yourself using quite often when dealing with data from an external provider your users will thank you when they experience how easy it is to navigate and consume information in your apps did you know that with react you can transform any list of items into a collection of react components so drawing upon the previous example of little lemon's list of desserts imagine the restaurant would like to go one step further by providing its online visitors with a sneak peek at the best desserts in a dedicated section to encourage them to order well in this video you will learn how to display a collection of elements like this with react by using the map function in jsx syntax recall that jsx is a special syntax extension to JavaScript the react uses to describe user interfaces or uis and that a component is a function that returns jsx now let's explore how to render a list of elements with react in this demonstration I will use the list of little lemon's best desserts again each one having the following properties ID title image description and price the aim is to display a simpler version of this collection of top Desserts by displaying just the title and the price the first step is to create a new variable called list items to store the result of the transformation I am going to perform for that I am going to Loop through the array of desserts using the JavaScript map function you may be wondering what I should return inside the map function traditionally in JavaScript you would return any data type when you were working with lists in jsx you can also return a react component as the transformation applied to each element you will discover how that's useful later on since you will be able to embed the results directly into the return jsx recall also that all HTML tags are components by default so you can leverage all the semantic tags you already know from HTML for list items your best choice is the list item or l i semantic tag I am going to return an empty list item for now because the goal is to display the title of the dessert and its price I am first going to create a new variable for the text named item text I will use a dash to separate title and price as well as the dot notation to access the needed properties from the desert object which are title and price since this is a jsx transformation that will be part of the render method of this component you have to use curly braces to wrap your data in this case the text for each list item which is the value of our variable item text the last step is to go to the render method and embed list items into the HTML list wrapper component unordered list or UL and that's it the desserts are displayed in a simple and concise way this Edition will certainly help little lemon restaurants to increase its orders so well done you have learned how to transform collections of elements with react by using a combination of the map function in jsx curly braces with lists being one of the core building blocks of app development you're now one step further in your journey to creating great apps one important advantage of using react is its ability to automatically optimize updates in your user interfaces or uis if react was a plane it would use autopilot mode in most cases letting you relax in the driver's seat but even with autopilot you'll need to take action sometimes like for example performing a specific maneuver to land the plane the same is true for react as there are scenarios where you as the developer we need to take extra steps to specify how react should behave when your UI changes in this video you will explore how to use Keys as a way to do so when dealing with lists of elements you will learn how to use keys to identify and distinguish elements in a list how to determine the right key for your list items as well as what using keys incorrectly means for your app's performance because react is Fast by default and designed with out of the box performance in mind you usually don't have to think about updates in your uis when Computing a change react applies its diffing algorithm to calculate the minimum number of changes that are necessary to perform an update in your tree of components although this algorithm works perfectly most of the time as mentioned earlier there are some cases where react can't make important assumptions to find the most optimal path for an update which means the developer will need to step in let's explore one such example imagine the drink section in the little lemon online menu where restaurant managers can add new drinks depending on the season when they add a new element at the end of the list the diffing algorithm works well since react will match the two beer trees match the two wine trees and then insert The Cider tree however when inserting a new element at the beginning of the list the algorithm offers worse performance because react will mutate every child instead of realizing it can keep the beer and wine sub trees intact this inefficiency can be a problem to solve this issue react supports a key attribute so what are keys keys are identifiers that help react to determine which items have changed are added or are removed they also instruct how to treat a specific element when an update occurs and whether its internal State should be preserved or not to illustrate adding a key to the last example can make the tree conversion efficient that's because react now knows that the element with the key cider is the new one and the elements with the keys beer and wine have just moved the general rule of thumb with keys is to use a stable identifier that is unique among its siblings this allows react to reuse as many elements from the list as possible avoiding unnecessary Recreations especially when their content is exactly the same and the only thing that has changed is their position in the list the key used most often is a unique ID that comes from your data those IDs typically mirror a database ID which is an ID given to an item in a database that by nature is guaranteed to be unique but what happens in cases where your data doesn't have any suitable ID or you are rendering a list that is not dependent on any server data in these scenarios you may think that generating your own unique IDs is sufficient whether you do so via an external library or with a randomizer function like the built-in math.random function however while that approach will indeed avoid any collisions in your keys meaning that it will not produce two keys that are the same it will not preserve the internal state of your list items this is because when a re-rendering occurs those keys will be different resulting in react having to recreate your list from scratch as a last resort you may use the item index since it determines the position of each element in the list it guarantees the absence of duplicates but indexes are not recommended for keys if the order of items may change for example in cases where your list has sorting capabilities or users can either add or remove items when used incorrectly keys can negatively impact performance and may cause unexpected glitches in your UI when updating your lists that's why it is very important to make a conscious decision about your keys implementation you have now been introduced to keys in react and how to use them when dealing with lists of items such as using keys to distinguish between list elements choosing the right key and the effects of incorrect usage of keys on app performance a primary takeaway is to always use a key that is guaranteed to be unique among its siblings so use unique IDs from your data when possible you can use indexes as a last resort but don't forget that this approach will not work when the order of your list items is prone to change next up you'll have the opportunity to explore using keys within list components in practice bye for now in this video you'll learn how to use Keys correctly within list components in react through a practical example imagine that little lemon restaurant managers would like a separate application that keeps record of the tasks they need to do in order to do that I have built a very simple to-do list app with two different editable to-do's that are represented via text inputs as well as a button that will reverse the order of the to-do's I will start by walking you through the code example I created previously with create react app the to-do component is basically a table row which has an ID a text input to type a value and a date of creation both ID and created ads are passed as props whereas the input value State lives in the Dom node in other words the text input is an uncontrolled component the main app component encompasses the whole interface displayed on the screen the to-do's data model is a piece of state which is essentially an array of objects where each object contains an ID and a date of creation then there is the reverse order function which effectively changes the order of the to-do's the reverse method from arrays is a mutated operation that means that it modifies the original array rather than a copy to avoid mutating the react state which is something you should never do it's important to make a copy of the array first which I'm doing by using the es6 spread operator finally when it comes to the jsx for the user interface there is a wrapping div a button to reverse the order of the to-do's and a table where each table row is a to-do task each to do instance receives an ID and created at as props which we are passing from the data model now coming back to the app the first thing I'm going to do is to open the browser console a warning in red is displayed when you are running your application in development mode react does a great job of providing solutions to potential problems in your applications via contextual warnings as console errors the warning clearly states that each child in a list should have a unique key prop and that I need to check the render method of the app component the index position of the to do item fulfills the requirement that the react warning is asking about so I'm going to use that okay now when I reload the application the warning disappears however I haven't tested the application yet so let's type some to-do's and explore what happens when I reverse the order for the first one I will type stock take and for the second one process payroll now I would like to reverse the order because the managers should do payroll first oh that didn't work now did it the text inputs have not moved but everything else has well you have just discovered one of the main problems when using indexes as Keys when the order of your list items is prone to change so what exactly is happening if I go back to the code and take a look at the jsx for each to do when I reverse the order of the to Do's the idn created at prop have changed but the key is still the same because I'm using the index since it's the same react is instructed to keep the internal state of that node that's why the input state from the to do is preserved now how do you fix that coming back to the key requirements it has to be something unique but that correctly identifies each to do no matter what its position is in the list in this case I can definitely use the ID property from the data model as my key after all that is guaranteed to be unique for to do so now I'm going to implement that change and I will run the previous test again by clicking the button one more time great this time it worked as intended you have learned about choosing keys in your react code you will come across collections of elements quite frequently and with your knowledge of keys allowing your users to do the tasks they want to complete first won't be a problem anymore when browsing the internet there's a big chance that you'll land on a form even without you realizing it from simple email inputs and subscribing to newsletters to more complex forms such as creating an account on your favorite social media platform forms are everywhere so you'll probably find yourself implementing them in your applications regularly in this video you'll learn the concept of controlled components in react and how they are used in form processes the fundamental concepts of HTML forms and how forms can be created as react components when it comes to react applications HTML forms work differently to other Dom elements you may recall that the Dom is a logical tree-like structure representing the HTML document and it uses nodes to describe the various parts of the document traditional HTML forms keep some internal State inside the Dom and have some default behavior when submitting them that's normally done via the action attribute which points to the end point that will handle the request but what if you would like a more granular level of control for example customers of the little lemon restaurant can reserve a table on the website using a form imagine if there was a function that could handle the submission of the form and access the data that the user entered into it that's where controlled components come in controlled components are a set of components that offer a declarative application programming interface or API to enable full control of the state of form elements at any point in time using react state rather than relying on the native state from Dom elements the react state is made the single source of Truth controlling the displayed value of your form elements at all times the way you perform this state delegation is via the value prop value is a special property the react added to most of the form elements to determine the input content at any point in time during the render life cycle so in order to create a controlled component you need to use a combination of local state and the value prop initially you assign the local stage to the value property but how do you get updates from any new text character entered in the input well for that you need a second prop to complete the design of your controlled component the on change callback the unchanged callback receives an event parameter which is an event object representing the action that just took place similar to events on Dom elements to get the new value from every keystroke you need to access the target property from the event and grab them value from that object which is a string finally to have control over the form values whenever the form is submitted you can use the on submit prop in the form HTML element the on submit callback also receives a Dom like event as a parameter there you can access your form values to perform any desired logic that must take place before submission for example validating your input values also if you would like to prevent the default HTML form Behavior you need to call event dot prevent default inside your on submit callback well there you have it you have discovered a technique called controlled components that enables react to be then source of Truth for the state of your form input react offers controlled versions of the majority of input types and recommends using controlled components for the implementation of forms however keep in mind that there are still some form elements that remain uncontrolled similar to their Dom counterparts so as you move forward with your learning you will gain more insight into both controlled and uncontrolled form elements in this video you have learned about the concept of controlled components in react and how they are used in form processes you've also explored the fundamental concepts of HTML forms and how forms can be created as react components forms may look simple but there are many different features and functionality to forms and for developers there is an art to constructing forms react makes constructing and customizing forms much easier for developers and that's why it's such a popular choice would you like to master the art of building forms with react well there are some key Concepts and features that you will need to learn to truly unlock the versatility and effectiveness of controlled components and forms using react the little lemon restaurant online web page was created some time ago while little lemon were happy with the results for some time they started realizing their users were having issues with their old contact form after receiving some advice They concluded that it needs to be rebuilt and they have chosen react as the most suitable framework for the task due to the ability to easily apply the features functionality and control that they require from the form in this video you'll learn how to help little lemon by creating a controlled component and react using local state and the on change event to update form inputs avoiding the default behavior of the form submit event and disabling the submit button when the form is not valid recall the controlled components in react are those in which form data is handled by the component State whereas uncontrolled components are those in which the form data is handled by the Dom itself to gain more insight into creating form components in react you will now examine the code of a basic form example I am going to demonstrate the creation of form components in react using an app I constructed previously in this example the project has been created with create react app the return method of this functional component essentially has a form that contains two elements a text input to type a username and a submit button this form resembles a classic HTML version so it'll work the same way whether you're using react or not to test the application I type John as the name and click on the submit button by doing so the default action of the form kicks in which is a get request to the root and a page refresh in react this current implementation is considered an uncontrolled form having all the states living in the Dom let's work through the necessary steps to transform this form into a controlled version first I need to create some local state for the text input which I'm going to call name secondly I need to hook up that stage to my text input via two props the value prop to turn the input into a controlled one and on change to receive all the changes per keystroke and thus update the state of my input last to control the submission of the form I have to use the on submit prop in the form tag for now I'll log a basic message stating that the submission was successful to the console now let's check if the form still works as before I'll type a name and click submit and it's working my message was logged to the console and the default behavior of the form has continued on although this is great I'd actually like to have more control on the submission of the form in particular I'm not interested in the default behavior of calling the root of the server and refreshing the page you may be wondering how I can prevent that from happening in traditional forums you would do this by returning false from the on submit attribute however in react the way to do it is by using the event property you get as a parameter in the on submit callback and calling prevent default on it now when I submit my form again no refresh happens and no server is hit with a request let's go one step further and clear out the input after submission for that I call the state Setter with an empty string inside the on submit callback great my form is taking shape to demonstrate even more benefits of controlled components let's perform an additional Improvement by only allowing the user to submit the form when the text input is not empty disabling the button is as easy as using the disabled attribute in this case if name is an empty string this expression would be evaluated as true and the button would be disabled so in the app I can't click on the button if there's no name provided finally for best accessibility practices let's connect the label with the input I set an ID for my input called name and now we will connect the label in traditional HTML forms you would have to use the four property but in react 4 is a reserved word so you must use html4 and pass the ID of the input now if I click on the label its corresponding input is focused and that's it regarding the basics of controlled forms in react you have learned how to transform an uncontrolled form into a controlled version using local state and the on change event as well as the on submit prop and some of the benefits of doing so in terms of form submission you also learned how to avoid default behavior and disable the submit button when the form is invalid well done you're making great progress have you recently bought a product through an e-commerce site or maybe you booked a table at your favorite restaurant well if so you may have received a friendly email afterwards providing a link to a specific page to provide feedback about the experience this is an example of a feedback form now that you're familiar with control components in react I'm going to demonstrate how you can build this functionality yourself you will also be using a range input and custom validation as part of building a feedback form imagine little lemon one of the best restaurants in town would like to send their customers a feedback form so let's go ahead and Implement a feedback form with react note that in this example the project has been created with create react app I have also added some initial code that is a form with just a header and a submit button the requirements for this example are an interface that allows users to provide a score from 0 to 10 and an additional comment to tell the chef how delicious the food they enjoyed a few days ago was the first step is to implement a control for the score there are different ways you can do this but I'm going to go and choose a range input for this use case as it provides the user with a simple slider to do this let's go ahead and create a new div to wrap the component this will consist of a label that I will name score as well as an input whose type is going to be range range inputs offer two props to define the range Min and Max for this example I will set the minimum to 0 and the maximum to 10. the application is now displaying a user-friendly slider to provide the score to wrap up the range component I need to do two more things turn the input into a control component and Visually show the numeric value that represents the slider selection for that I will Define a new piece of State called score that I will initialize to 10 because I know the chef's recipe is usually unbeatable enabling the user to reduce the score down from 10 when they interact with the slider if they want to now in the range input I have to use the value prop to hook the state up and use on change to receive the changes and update the state accordingly since I also want the numerical score to be displayed with the slider I'm going to add that information to this chord label along with a star so the user interface or UI is clean and concise great the feedback form is starting to take shape now let's implement the second element from the form a widget to provide an additional comment although I could use a text input here a comment could be very large so a more suitable choice is a text area for that I will declare another state variable named comment that will be initialized to an empty string for the UI I will create a new div with a label and a text area component for any additional feedback now that that is rendered well I need to hook up the state to the value prop and update the changes via on change and with that the UI for the feedback form is finished the last thing I'd like to implement is some validation to ensure a comment is required when the score is equal to or lower than 5 and that it should have at least 10 characters so the chef receives honest feedback from users that can be used to improve his recipe for that I'm going to use the on submit callback on the form component I will call prevent default first to avoid the default HTML form Behavior then I'm going to write an if statement to check if the score is equal to or less than 5 and the comment has less than 10 characters if that's the case I will show an alert to inform the user about the requirement and return from the function otherwise the user is good to go and I will log a message to confirm the successful submission of the feedback it's also a good practice to reset the form values after submission so I'll set both pieces of state to their initial values and there you go everything is working well and the submission message is logged into the console you have learned how to build a feedback form with react using control components and custom validation to make sure users have a seamless experience imagine that little lemon has been such a success that the restaurants will be expanding to other locations as a part of the construction project The Architects have created blueprints with the kitchen and dining areas set to be identical in size although the blueprints have been defined it will still be up to each restaurant manager to decide various things such as the size shape and number of tables type of chairs kitchen Crockery and utensils and wall collars in this analogy the blueprints for the new locations are react components where's the specific configurations for each location are what react props and state represent so what are props and State props at state are both plain JavaScript or JS objects the react uses to hold information as you progress through this video you will discover the differences and similarities between props and state in react you'll also learn how to identify whether something falls into props or state and when state is needed as well as how to differentiate between different react components based on props and State while both props and state influence the render output they are different in one important way props get passed to the component like parameters in a function where state is managed within the component like variables declared within a function so even though props and state are inherently different there are areas where they overlap notably when designing a component its main responsibility is to translate raw data into Rich HTML in the react ecosystem the props in the state together constitute the raw data that the HTML output derives from both props and states are plain JS objects and are deterministic this means your component always generates the same output for the same combination of props and State another similarity is that props and state changes both trigger a render update now how do you know if something goes inside props or state the rule of thumb is that if a component needs to alter one of its attributes at some point in time that attribute should be part of its state otherwise it should just be a prop for that component let's explore this in Greater detail props which is a shorthand for properties are a components configuration they are received from parents in the tree and are immutable as far as the component receiving them is concerned a component cannot change its props but it is responsible for putting together the props of its child components in addition to prop react components have another built-in object named State this object is a way to allow react to determine when it should re-render a component react is set up so that any change to the values served in the state object will trigger a re-render of a given component States life cycle starts with a default value when a component mounts and then modifications of that value happen over time mostly generated from user events so state is a serializable representation of one point in time or in other words a snapshot a component manages its own State internally you could also say the state is private now another question you may ask when designing a component is whether it should have any state at all well the answer is that state is optional since State increases complexity and reduces predictability a component without state is preferable although you can't avoid having some sort of State in an interactive app you should avoid having too many components with state finally let's examine one of the main ways of differentiating types of react components based on props and state components can be stateless or stateful stateless components have only props and no State there's not much going on besides the render function and all their logic revolves around the props they receive this makes them very easy to follow and test on the other hand stateful components have both props and state they're in charge of client server communication processing data and responding to user events these sorts of logistics should be encapsulated in a moderate number of stateful components while all visualization and formatting logic should move Downstream into as many stateless components as possible well done you've completed this lesson on the two types of data react users to build applications props and State going forward you'll be introduced to an additional approach to managing information called context in a typical react app data is passed from parents to children via props in a top-down fashion however there are certain types of data that may be needed by many components within an app in these scenarios using props which is what react offers us to pass data down is not always effective so in this video you'll be introduced to an alternative way of passing data called context you will learn more about what it is and why it was introduced and explore it in action let's imagine little lemon's food ordering app offers a light or dark theme that changes the background and text colors of all elements or some general preferences like a specific Locale depending on the visitor's geolocation that multiple components should be aware of and what do these pieces of data have in common well they represent a global state for your entire application now as your app grows in size the same will happen with a tree of components your app is composed of as mentioned earlier props is what react offers you to pass data down but in this scenario they can be cumbersome since you will have to explicitly pass that data through every level of the tree having intermediary components that don't really need the data and just act as a proxy this issue is commonly referred to as the props drilling problem and the name says everything you need to know about the problem parent components have to drill down props all the way to the children that need to consume them the way react has solved this problem is by introducing the context application programming interface or API context provides an alternative way to pass data through the component tree without having to pass props down manually at every level it is the right tool when you need to share data that can be considered Global for a tree of react components let's take some time to examine context API in action in this demonstration I'm going to use a simple app I created previously with create react app it represents a simple blogging platform that little lemon has to publish new Innovative recipes to its subscribers it consists of a header that contains a title and the current user that is authenticated on the top right the rest is rendered by the page component which itself consists of the user blog entries each one with a title content and author name note that there are two components that need to know the authenticated user the logged in user component inside the header and the page component because an authenticated user falls into the nature of global data that needs to be shared across several components this is a clear example where context is the perfect tool for the job so let's go ahead and create the needed context which I'm going to call user context now within the user context file you must follow the next steps first you need to import create context from react this is the function that gives you a new context object back the function argument is the default value which in this case I will declare as undefined since the app doesn't know beforehand who the logged in user will be second you need to create a provider component to do so I will call it user provider and render the user context dot provider component the user context dot provider component is what allows consuming components to subscribe to context changes this component accepts a value prop which is what will be passed to consuming components that are descendants of this provider now for this application the value prop should be the authenticated user so I am going to define a new piece of State for it note that this is an oversimplification that already assumes a specific user as in a real world scenario you will have to fetch the authenticated user first and then set it as state you will learn about fetching data later in the course all right so now that the state is defined I will hook it to the value prop next it's necessary to provide a way for components to subscribe to the context for that I am going to create a custom hook that wraps the use context hook which is the way to consume a context value this external function is created just for convenience so there's no need to export the user context to external components as a side note don't worry if you're not very familiar with hooks yet they will be covered in depth in future lessons the user context is now defined but the app is still not aware of it for that the provider component is needed so I'll go ahead and wrap the whole app with it the last step is to consume the user context in the places where the username has to be displayed which are in the logged in user component and the page component I'll go ahead and use the custom hook defined earlier use user and destructure the authenticated user from there finally that information can be embedded in both render methods the app now successfully displays the name of the authenticated user great work you've learned about context and why it's used and worked through a practical example of how to use it but keep in mind that although context is useful for Global State it's still recommended that you stick to props and state as much as possible that way your app data flow will be easier to follow well done you've reached the end of this module on react components let's take a few minutes to review what you have learned so far you began the module with a comprehensive lesson on how to render lists with react you are introduced to the map method in JavaScript which can be used with arrays to perform transformation operations and is a useful tool when dealing with data from an external provider that you'd like to display differently in your app you also learned how to transform any list of items in JavaScript using the map method first hand next you discovered how to use that math method function along with jsx to render a list of components and transform a collection of elements with react finally you gained an understanding of the concept of keys followed by a practical set of guidelines that help you choose the right key depending on your use case you learned that keys are identifiers that help react determine which items have changed are added or are removed as well as instruct react how to treat a specific element when an update occurs and whether its internal State should be preserved or not you also discovered that keys can be used when you need to provide explicit information that tells react how to behave when your UI changes when dealing with a list of items you've learned that the general rule with keys is to use a stable identifier that is unique among its siblings which is why the key used most often is a unique ID from your data you then learned that it is possible to use indexes as Keys as a last resort but that this can negatively impact performance if the order of your list items is likely to change next you moved on to a lesson on forms and how react treats them differently compared to traditional HTML versions you were first introduced to controlled components which are a set of components that offer a declarative API to enable full control of the state of form elements at any point in time using react state you learned how to convert any traditional HTML form into a react form using a set of controlled components in other words you learned how to transform an uncontrolled form into a controlled version using local state and the on-change event as well as the on submit prop you also discovered some of the advantages of controlled components compared to uncontrolled components for example it makes it possible for you to have more control over form submission such as disabling the submit button when the form is invalid last you were taught how to implement a feedback form and in relation to this how to perform any custom validation logic before the submission of the form occurs the final lesson began with a recap of props and state you learned to clearly differentiate between props and state and when to use one or another recall that although props and state have similarities for example they're both plain JavaScript objects the react uses to hold information props get passed to the component where state is managed within the component key takeaways included that if a component needs to alter one of its attributes at some point then that attribute should be part of its state otherwise it should just be a prop for that component and that a component without state is preferable you also learned about stateless components which have props but no State and stateful components which have both after that you covered the problem of props Drilling and how it affects your component's modularity as parent components have to drill down props all the way to the children that need to consume them you were introduced to context API as a solution to this problem and discovered how to use it to encapsulate any piece of global State and avoid manually passing props down between components the power of react context was Illustrated as a viable alternative to local state well I think that's a fantastic start on your journey to mastering react looking forward to working with you in the next module metabolic Studios for Productions and virtual reality in New York City and take or what do you say take what do you say action
[Music]

thank you [Music] foreign
I'm a software engineer at meta based in the Seattle office so so react hooks were first introduced at a react conference and it was shared with the community and this is you know the community of react enthusiasts who are excited about the new things and they're the people that we trust to give us the feedback and and test out the things that we're thinking about I had gone on vacation and came back and and my co-worker had been saying like oh there's this new exciting thing let's start using it and and I looked at it and I thought this is so silly like why do we need this thing and then he's like no no no trust me it's gonna be great so I was like okay fine and you know I started learning them I started using them and and now I can't imagine writing code without hooks at first it sometimes feels a little unintuitive or there's like a lot of magic going on that doesn't make sense right away but once you get the hang of it and and you start using it and understanding it it actually really makes life easier to to use hooks can actually simplify your applications greatly and introduce performance gains that can make your code more readable and easier to to manage as well as your code more shareable and reusable before the introduction of hooks we were using class components and they seemed like they were doing their job but with time these class components were becoming bigger they were becoming quite complex we couldn't really break certain components down into more modular components or pieces we we wanted to make code more usable we wanted to make it simpler and remove this need for having these huge bloated components that were not able to to be broken into smaller pieces when we develop new technologies that matter we try to be the first users of those things to make sure they actually work and and we get to be watching the feedback as it comes directly from our Engineers so the same thing with hooks we started actually using them internally a lot and we saw that internal teams are are also starting to to really appreciate the improvements that hook introduced and so that really Justified that folks are making a big difference in in the process of developing react applications and it gave rise to Rolling it out more widely so when hooks were into Drews they were actually introduced in a non-breaking way which meant that you don't have to use them you could continue to use the old style of writing rack components and they didn't break anything that was previously written and this is one of the approaches that we use when we roll out new things is that we want to make sure this new thing doesn't break any of the old things that people were doing my advice for you as as you're learning Hooks and working with them for the first time is to stick it out it's they may seem hard and confusing at first but they actually will improve your code with time and and it may be tempting to use the old way of writing uh react code but actually with hooks you will find that once you learn them code will make more sense with hooks even if at first seemed a little confusing and intuitive so take the time to learn them make that investment up front and you'll find that it's worth it in the long run imagine the little lemon needs a way to track the restaurant's food inventory in this video you'll work through some practical examples using an app built for little lemon to revise the use State hook and explore how they use statehook is invoked you'll examine the return values of the use State hook and how it's used to update state you are probably already familiar with a used State hook which is used to work with state in a react component with State being all the data an app is working with at a given time but before moving on to use State let's revisit the concept of array destructuring recall that a rate is structuring is a way to get individual items from an array of items and save those individual items as separate components now let's explore this concept with a practical example say you're coding an app that tracks current food reserves in Little lemon's Pantry you're using a variable to keep all the veggies in an array as you continue to code you realize you need to get each item from the array into its own separate variable for the first item in the array you want to name the variable V1 as in Veggie one the second item V2 and so on with array destructuring you can do this easily using a single line of code for more information on array destructuring you can refer to the additional resources at the end of this lesson note that with array destructuring you're free to give any variable name to the items that you destructure from an array however when destructuring objects you have to destructure a property of an object using that exact property's name as the name of the destructured variable this makes objects a lot stricter in terms of what you can name your D structure variables for that reason react uses the array data structure for the use State hooks return value now that you've had a sneak preview of the return value of the use statehook let's explore how it actually works I will demonstrate how to update State and react apps by using the use State hook to set the initial value of the restaurant name to lemon and then using only the use State updating function to update it to little lemon the u-state hook allows you to work with State and components let's start discussing state by revising what happens when I call the use State hook I'm only returning null from here because I want to focus on the console for now inspecting the console this is what gets logged the console logged value is an array with the state variable's value being the first item in the array the second item in the returned array is the function that will be used to update the state so the use statehook invocation returns a two-member array the convention is to name the state updating function using camo case another convention is to name it by prepending the word set to the variable name used for the destructured state variable in other words the correct way to work with State means that my starting code example should be improved to correctly destructure the array returned from the call to the use State hook now the destructured restaurant name variable holds the state and the destructured set restaurant name variable holds the state updating function this is an example of array destructuring using the use statehook you may be wondering how you can update State well when first starting to use the use State hook some developers try to update the state variable in a variety of ways but there is only one correct way to update State when using use State and that's through the state updating function in other words the only way to update the state of the restaurant name variable is by invoking the set restaurant name function in a react App State changes are usually triggered through the act of a user interacting with the app this means that state changes are usually triggered by user generated events these events such as Mouse movements button clicks and key presses happen all the time in an app the role of a developer is to respond to specific kinds of events in a way that's meaningful to the app that's being coded one common way users interact with web apps is through button clicks so let's examine an example of changing state in response to these user-generated events namely button clicks in this example code I'm adding a button which when clicked will execute a function this function is update restaurant name which is invoked wherever a user clicks on the button now when I click the update restaurant name button that will change the H1 heading from lemon to little lemon because the invocation of the update restaurant name function triggered a call to the set restaurant name State setting function you should now be able to recall what the use statehook is used for and how it works in practice I hope that working with the use State hook will be a fuss-free task for you going forward especially when working with primitive data types to track state in a component imagine it's the very early days of little lemon with the restaurant only existing on paper the owner would like an app to track the development of the restaurant business and the achievement of all related goals let's explore how to build a goals app with the described requirements in react using the use statehook in a component and updating the state the completed app is now displayed on screen when this code is compiled I get a heading that reads my little lemon goals and then I have a simple form with two inputs goal and buy the first input field is there to let the owner type out their goal and the second input field is there to let them type out the time frame within which they want to achieve a given goal the code itself consists of three separate components goal form which captures a new goal using a form list of goals which Loops over all the previously added goals and displays them as an unordered list of list items and the app component which puts those two components together and allows me to render them as well as past the functions that they'll be working with through their props let's explore these the first component namely the goal form component accepts the props objects in the body of the goal form function I start by declaring a state variable of form data which is de-structured from a call to the use State hook I initialize this form data variable as an object with two properties goal and by both assign the values of empty strings next I declare two functions change Handler and submit Handler first is the change Handler function which accepts an e-parameter this e-parameter is a readily available event object in other words I don't have to pass this object from my change Handler it's provided to me by a mechanism outside of react even in plain JavaScript whenever an event is fired this creates an event object with many different pieces of data related to the event I can then use this event object by simply assigning it a custom name such as e EVT or even event I'm using the letter e here to keep my code concise in the body of the change Handler function I update the state of my form data variable by invoking the previously destructured State setting variable of set form data which was destructured from a call to the use statehook the set form data function accepts a shallow clone of the previous value of the form data variable that's the form data variable with the spread operator before it here remember that you should not work with the form data variable directly which is why I'm making a copy this is because of how react optimizes its virtual Dom keeping State immutable makes it possible to compare a previous version of the virtual Dom with the updated version more efficiently and cost effectively next I update this new copy of the form data object by adding this code it reads the e-target name using the brackets notation then sets the value of this property to whatever is inside that e.target.value property of the instance of the event object which was built when that specific event was fired the reason why this works with the brackets notation is that it allows me to set the value of the e-target name dynamically in other words it allows me to set it as goal if the user typed into the input with the name attribute set to goal or to set it as buy if the user typed into the input with the name attribute set to buy second I declare a submit Handler function which also accepts the event attribute the goal form component receives the prop named on ADD and I'm giving the function add goal to it as the props value but it's not just any function it's actually a function that's declared right here on line 43 inside the app component itself this add goal function accepts a goal entry and updates the value of add goals State variable that's kept inside the app function it does this by adding this goal entry to the list of previous goals saved and tracked inside the all goal State variable of the app component the update of any state variable must go through the previously destructured State updating function in the case of the app component the state updating function is the update all goals function that's why I'm invoking the state updating function inside the add goal function to make it all work I also need to pass the add goal function definition to the gold form jsx element in the app component's return statement that's why the add goal function is now available as a prop named on ADD inside the gold form function and that's why I can now use it inside the submit Handler function starting up here on line 10. so I'm back in the goal form function declaration once the props dot on ADD function is invoked here on line 12 it receives the form data variable which triggers the update of the all goes State variable in the app component as described previously but now I still have the form showing the values that the user entered to deal with this I need to reset the form data State variable to an empty string both on the goal property of the form data State object and the buy property of the form data State object this now brings me to the return statement of the goal form function here I want you to focus on the form element that has the on submit event handling attribute set to the submit Handler function the first and second inputs both follow the same structure of having the type name placeholder value and on change attributes which hook into the previously described functionality moving on to the list of goals component this component receives the all goal State variable as a prop from its parent app component the purpose of this is to map over the all goals array of objects where each object holds the two properties that describe a single goal as explained earlier by mapping over the all goals array of objects I now output this unordered list with a list item entry for each individual goal having now worked through coding a goals app in react you should have greater insight into using the use statehook within a component including how to declare read and update state before moving on to using another hook known as the use effect hook let's take some time to consider its name the name of the use effect Hook is closely related to the concept of an effect or more precisely a side effect in this video you will learn what side effects within a react component are including what pure and impure functions are and their relation to side effects as well as how use effect is used to perform side effects within functional components so what is a side effect a side effect is something that makes a function impure did you know that functions can be classified as pure and impure simply put pure functions don't have side effects and impure functions do let's unpack the concept of pure and impure functions in relation to side effects and more a pure function should receive specific input that is a specific parameter will always return the exact same output no matter how many times it gets invoked to illustrate let's explore a function that uses the Year little lemon was established in this example the established year component accepts a props object that is a props parameter it also returns a value that is a heading that outputs the words established year followed by a colon space and the value of the Year prop as long as the value of the Year prop is 2003 regardless of how many times the established year function is invoked or it is rendered from the app component the output will remain unchanged this is an example of a pure function the established year function has no side effects by contrast an impure function will perform a side effect that means it will do things such as invoke console log invoke fetch or invoke browsers geolocation functionality in this context a side effect can be thought of as something external to or outside of a function consider the example of a shopping cart function built for the little lemon app it is an impure function because of the line that reads console log total the console log call makes the function impure as it's a call to a browser application programming interface or API the shopping cart function now depends on something outside of itself and even outside of the react app to work properly so how should you deal with the issue of impure functions in react well it's all about containing the impure actions inside their own special areas to do this in react you need to use the use effect hook let's update the shopping cart component with the use effect hook to properly deal with the side effect caused by the console log first you need to import the use effect Hook from react the use effect hook works by accepting two parameters the first is a callback function the second parameter is an array this array can be kept empty which is perfectly valid while the syntax is valid it's common to use an arrow function as the first argument of the invocation of the use effect hook note that the use of fact has been simplified to a single line of code it usually spans several lines of code that's because it typically needs to do something more meaningful than just console logging the value of a component's variable in this video you learned about pure and impure functions and their relation to side effects exploring with side effects within a react component are and briefly how use effect is used to perform them you can look forward to applying this knowledge by using the use effect hook introduced in this video to perform side effects to demonstrate how to use the use effect hook within a component let's continue working on the little lemon app say the owner of the restaurant wants to add a specific way for the user to interact with the app on a button click the owner wants a welcome message displayed and on another button click the owner wants the message hidden Additionally the owner wants this change to be reflected on the browser tab where the app is served updating a browser tab is an example of a side effect in this video I will demonstrate how to do this by using the use effect hook to perform side effects in react as well as how to control when the use effect function is run using the dependencies array I am going to use an app I built previously using Create react app to demonstrate how to use the use effect hook to describe what's happening let's start with a return statement I have a wrapping div and inside of it an H1 a button and a jsx expression that uses the logical and operator to conditionally render an H2 the button has an on click event handling attribute and it triggers The Click Handler function which I've declared as a function expression starting on line seven on line five I've destructured the toggle variable from a call to the use State hook to track the state of the toggle variable and make the conditional rendering in the return statement possible now let's inspect my app in the browser as it's currently being served everything is working well when I click the button the sentence welcome to little lemon appears under it if it wasn't shown previously and vice versa although the app is working well my app currently has no way of updating the text in the browser tab like the restaurant owner wants it to do this is an example of a side effect which is why the correct way to add this functionality is to use the use effect hook so above the return statement I'll add a call to the use effect function as follows react.use effect I need to pass a function to the use effect call so I'll add an arrow function without parameters and in the body of the arrow function I'll add this ternary here which checks if the value of the toggle variable is true or false if it's true it should return the string that reads welcome to little lemon otherwise it should return the string that reads using the use effect hook Whatever Gets returned is the value I'm assigning to the title property of the document object this property thus dynamically updates the text showing on the tab of the browser where this react app is served let's inspect the updated app in the browser I can confirm that with every click of the button the title on the tab is updating to one of the two specified strings so imagine that the owner has changed his mind and he wants the title on the document to be set on the initial component render after that he doesn't want it updated this is where the dependency array comes in the dependency array determines when the use effect hook will be invoked for now I'll update my code with an empty dependency array meaning I'm not tracking the state of any state variables in other words regardless of what is happening in my app I don't want the use effect hook to be invoked this means that it'll be invoked only once and after that no matter what happens in my app the use effect hook will no longer be run now that I've updated my app let's save the changes and examine how this affects the behavior of my app in the browser the use effect hook runs only once outputs the words using the use effect hook and after that regardless of how many times I click on the toggle message button there are no further updates to the tab title the dependency array is there to watch for changes to a specific variable and based on that execute the function that's passed in as the first argument of the use effect function call this means that if I want to run the use effect hook whenever there's an update to the value stored in the toggle variable I need to add the toggle variable to the dependencies array after this change back in the browser the use effect hook will be run every time the toggle message button is clicked because the click Handler updates the value of the toggle State variable by invoking the set toggle function this in turn triggers the use of fact invocation since the dependencies array is set to watch for changes to the toggle variable's value and there you go I have a way to fulfill any of the restaurant owner's requests that might involve some side effects in my react apps you should now have a better idea of how to use the use effect function to handle side effects and of how to use the dependency array to determine when it will be invoked by now you should have a fairly good idea about the purpose and functionality of hooks in react and you may have even started using hooks in some of your Solutions if so you may have encountered some cases where hooks might have made your code invalid well that's because there are a few basic rules to hooks that you need to be aware of and follow in your react apps in this video you will learn all about the rules of hooks and react and why they are so important and why you would only call hooks at the top level and from react functions the four main rules of hoax are as follows first you should only call hooks from a react component function second you should only call hooks at the top level of a react component function third you are allowed to call multiple State hooks or effect hooks inside a component and finally always make these multiple hook calls in the same sequence now let's unpack each of these rolls in a little more detail the first rule means that you should not be calling hooks from regular JavaScript functions instead you should only call them from inside a react component function from a built-in hook call for example from the use effect hook or from a custom hook in this example the code describes a button that can be clicked to pick up a new name for a pet the name Looper function is used to limit the pack name choices to only fluffy Rexy or Gizmo notice that they use statehook is accessed at the outermost scope of the app function it has not been used anywhere other than this for example inside the name Looper function scope however you may have observed that this rule does not prevent you from using the state setting function which is named setpat name here State setting calls can be used wherever required the second rule means you must call your hoax before a return statement outside of Loops conditions or nested functions if you use a hook in a condition you're breaking rules for example here the use effect hook has been used inside the if conditional statement that makes the use of the hook in this code invalid the third rule is straightforward there can be multiple hook calls as long as they are always in the same order what that means is that you cannot Place hook calls inside conditionals because that might result in an invocation of a hook being skipped when compared with a previous render in this example with the same code that describes a button that can be clicked to pick up a new name for a pet the use State hook has been used incorrectly rather than using the state setting function Set pet name inside the name Looper function the use State hook has been used here instead if you were to compile the code and run the app you may find that the expected output is returned for example I'd like to name my pet fluffy with a pick a new name button rendered beneath however as soon as you click the pick a new name button you would receive an invalid hook call error that would violate the fourth rule in other words it might disrupt the sequence of invocation from one render to the next such a violation would result in errors if you want to call an effect conditionally you can still do so but make sure to place the condition inside the hook here the user Factor Hook is invoked initially followed by the if conditional statement so now you're not breaking the rules and the code is valid so let's recap on the four main rules of hooks you should only call hooks from a react component function you should only call hooks at the top level of a reactcomponent function you are allowed to call multiple State hooks or effect hooks inside a component and finallyalways make these multiple hook calls in the same sequence and that's it in this video you learned the main rules of using hooks in react and why you would only call hooks at the top level of and from react functions as long as you stick to these few simple rules you can enjoy using hooks in your react solution successfully the fetch function is a very useful tool but there are some important things that you need to understand before you start using them initially it's good to get an overview of how JavaScript delegates duties so that you can gain insight into how the fetch function contributes to this process in this video you will learn how the fetch function Works to retrieve data from the web and how to provide an example in plain JavaScript of the process fetch is used to make a server request to retrieve some Json data from it fetch API is a set of functionalities that we have at our disposal to use in JavaScript to make such a server request it's a bit like a clerk at the post office say you're bringing a package to the post office and you're the first in the queue the clerk on the other side of the service desk is Javascript since they can only do one thing at a time they go through the process of getting your details measuring the weight of the package pasting stamps onto the package charging it for the service and going to the back office and carrying the package there then taking time to find the correct place for the package before it gets shipped the problem with this approach is that the next step cannot start before the previous one is finished that's what's known as single threaded execution since JavaScript is not at all equipped to multitask a way to go around this issue is as follows first JavaScript gets your details at the same time it calls a clerk to measure the weight of the package then JavaScript calls yet another clerk to paste some stamps onto the package JavaScript calls yet another clerk to charge you for the service and yet another clerk is called to carry the package to the back office allowing JavaScript to take care of the next customer essentially this delegation of Duties is what's referred to as a synchronous JavaScript in this metaphor you can think of the browser as the post office JavaScript as one clerk in the post office and all these other clerks can be referred to as browser apis or web apis now let's explore a practical example of how this delegation of Duties Works in JavaScript so I have a local HTML file the most important part of this file is the script tag which is getting some JavaScript code from the file named script.js located in the same folder as this HTML file I'm serving these files locally using the live server vs code extension so let me inspect this HTML file in the browser okay so currently it only shows a H1 heading that reads fetching data now let me take a step back and let's say that JavaScript the post office worker needs to get some user data from the computer database here is the JavaScript code inside the linked to script.js file what do you expect the output of this code will be since JavaScript can only do one single thing at any given time well let's explore what the code is doing step by step on line one it performs a console log for the words another customer approaching then it contacts the fetch API which is a browser API that is external and separate from JavaScript rather than waiting for the fetch API to return the information it keeps on executing the code that comes after it outputting the text that begins our valued customer in the meantime the fetch API requests some user data from a third-party web-based API available at the randomuser.me website the fetch function is what's known as a facade function meaning it's a function that looks like it's part of JavaScript but actually it is just a way for me to call a browser API from JavaScript in other words it's a way for me to access a piece of browser functionality that's outside of JavaScript you can think of it as the JavaScript post office clerk calling the records department of the post office to get some data about a customer when the other clerk gets back with the information and hands it over to the post office clerk then they will get a Json representation and finally we'll log that data to the console that means that the sequence of console logs from the code will be as follows an initial console log that outputs another customer approaching a second console log that outputs our valued customer please wait a moment while I get some information back from the records department and a final console log that outputs the data I'll now execute this code to confirm the described Behavior everything is already saved so all I need to have this code executed is to go back to the browser right click on the page and press the reload command to refresh it you can achieve the same result by pressing the F5 key on your keyboard so now I first get another customer approaching then the hour valued customer and finally the result of the call to the third party API this is how JavaScript although being single threaded can perform a synchronous operations in this video you learned how the fetch function Works to retrieve data from the web and how to provide an example in plain JavaScript of the process you should be familiar with this concept before fetching data in react which I'll explore soon the little lemon restaurant wants to run a competition for its customers where a lucky customer will receive a free meal at the restaurant all customers that are signed up to the little lemon app will be entered into the competition and a random customer will be selected as the winner in this video I will show you how to get some random user data from a website I will be using the random dot me website to access random user data for this demonstration I have prepared some code for this app to fetch the user data from the website if I execute this code it will initially output the data pending text in the H1 heading at the same time in the background it will be carrying out the fetch data function to retrieve the user information from the random user website notice that I have the dev tools open and the network tab active I will click on the no throttling drop down to artificially slow down my connection and the drop down I will choose the slow 3G preset this is so that I can observe the data pending text and the heading before the data gets fetched from the web once the data has been successfully fetched it updates The View with the data returned H1 heading and the user information that has been retrieved in this example the data that was requested was the first name and the last name of this random user let's step through this code in more detail so first I have the app function and inside of it following the rules of hook I'm invoking the use statehook at the top level of the component the initial value of the state variable is an empty array next I have defined the fetch data function which is fetching data from the random user.me API then it retrieves a response from the API in Json format it then updates the state variable with its Json data you may notice that I'm not using a hook inside the fetch data function because that's against the rules of hooks after that I'm calling the use effect hook and from inside the use effect hook I'm calling the fetch data function which I've defined previously finally I'm using conditional logic to decide what to return first I'm using the object.keys code snippet to put all the keys of the user object into an array since object.keys returns an array I can access the length property on this array and check if the length of this array is greater than zero if it is it means that the contents of the state array has changed because as you may remember the state variables array was empty so if the array is no longer empty then the div section will be returned with the H1 tag and a couple of H2 tags otherwise the H1 tag below is returned that reads data pending sometimes it can take a little bit of time for the fetch data function to retrieve the data requested therefore the data pending message would be displayed initially after the code is executed once the data has arrived from the fetch data call this change in state causes a re-render of my component so the return statements ternary operator is re-evaluated and that returns all the data from my call to the fetch API and this is essentially how you get data from the web using react so the little ramen restaurant would be able to apply the same logic to their customer list API to select a random winner for their competition in this video you have learned how to fetch data using the state and effect hook imagine opening up your the landing page of of Facebook or Instagram and all you see is just emptiness because the things that fills this the the data in there the the the photos and the words and the likes and the comments all of those things are coming through the API so writing apis with Integrity with efficiency is an important part of the application development process and without it you basically don't have an application
[Music]

[Music] thank you
[Music] my name is martara I'm a software engineer at meta working in the Seattle office the design process at meta for for apis usually involves multiple iterations just in the same way that when we write code we get our peers and colleagues to review it we do the same with with API you know somebody or a group of people would usually write a document that's a proposal for how the API would be and what the structure is what the agreements that each part of the application will make with each other and then that's proposed that proposal is usually placed forward other Engineers will review it they'll leave comments they'll say this makes sense this needs to be changed this this is not good and then we iterate we improve it and and then when the API is looking good it's in the final stage we then take it to the next step which is building it and the building process the same thing happens we're going to review the code that is implementing the design that was created and there are comments and feedback and iterations and once that's complete then we have our API ready usually the process of developing an API involves Engineers on all ends of the spectrum so we would be talking to the front-end engineers and the back end engineers and people working in the middle layer in between as well to make sure that the apis are consistent and make sense across the entire stack and you know basically if you think about apis to just simplify it it's it's a way to talk to different things if you have your mobile phone you have your application and that you're holding in your hand it has to talk to the server and so the way it talks to the servers through an API so if you want to talk to something you have to establish some kind of understanding and that understanding is established between the developers in order for it to be built into the application and reflected in the way that the API is designed there are a few things we look for and follow when we're designing apis one of them is ensuring type safety so so type safety is basically a way to ensure that when you're fetching something from the back end you're going to get what you're expecting so if you're requesting a photo that you actually do get a photo not a video or or something else so that's an important part of Designing API to make sure things don't break a lot of the application failures happen when there's a mismatch in the data where you fetch something you expect a certain object and you get something else so that type safety ensures these kind of mistakes or problems are are minimized and it increases the stability of an application when you have that consistent type safety across the stack one of the things that I usually struggle with when designing API is making it such that it'll work for the future and and there's a little bit of a sweet spot to to aim for with this that we can obsess about wanting to make our apis very compatible with the future and trying to anticipate how the application will evolve and we're going to need this and that and let's make it in right away but also sometimes that could be too much and finding that balance where you think about the future but not so much such that you're holding yourself back from actually getting the work done uh it's just like with everything in life you know you try to anticipate but also um you try to also focus on the problem in front of you now and how you can address it effectively I know apis can be uh a little overwhelming at times so wishing you the best of luck take your time to learn them and don't let that overwhelm you or intimidate you it's okay that when you're looking at apis you're going to be venturing into the back end and so just know that you are taking on more scope and more complexity and that's going to be good for you because you will become more attractive to employers you will expand your knowledge so don't don't let that intimidate you or hold you back it's it's going to be helpful to to learn these skills and and Concepts the advice that I that I want to give myself and everybody who's thinking about apis is to keep it simple sometimes we tend to overthink too and and try to cram too many things into two apis and and try to make it very fancy and very uh using complicated and complex design patterns but actually Simplicity is really important in an API design and the readability of it is is a big plus so keep it simple and and try to keep it stable and free of bugs by now you should have a fairly good understanding of the use State hook and be able to practically apply it to your Solutions however the u-state hook does have its limitations for example the u-state hook may become cumbersome if you have complex State logic that involves multiple sub values or when the next state depends on the previous one in these situations the use reducer hook can provide a much better alternative in this video you'll learn more about use reducer and how it differs from you state you can think of the use reducer as a super powered use state the u-state hook starts with an initial state but they use reducer hook gets a reducer function in addition to the initial state this is beneficial because the reducer function second argument is the action object this object has multiple type values and based on each of these types values you can invoke the dispatch function to perform a specific operation now say the little lemon restaurant is growing in popularity and demand and as a result keeping track of expenses is becoming an issue so far they have been calculating the income and outgoings manually as they sell meals to their customers and buy ingredients to replenish the stock little lemon is looking for a solution to this using react in order to keep track of expenses in their app and reduce the burden on their staff because using the use State hook would make the solution to this unnecessarily extensive this is a perfect opportunity to implement the use reducer hook in order to Simply keep track of the cost of buying ingredients and the income generated from selling the finished meals to the customers now let's explore how to implement the use reducer hook in a code example to reinforce your understanding imagine I am coding the expenses tracking application for little lemon discussed earlier using react and use reducer with this app I can track two actions the cost of buying ingredients to prepare the meals in the little lemon restaurant and the income from selling the finished meals to the customers in the restaurant for the sake of Simplicity I've only added two actions buy ingredients and sell meals the reducer function takes in the previous state and an action and Returns the new state the action type determines the specific action of the reducer actions can have any form by convention it's common to pass objects with a type property identifying the action it should include the minimal necessary information that the reducer needs to compute the next state you can find out more about extracting State logic into a reducer in the additional readings at the end of this lesson instead of using set State like the use State hook you use the dispatch method of the use reducer hook this accepts an object literal with a single property called type set to a matching action.type whose behavior is defined inside the reducer function as I'm already serving this app in the browser let me demonstrate how it works when I press the shopping for veggies button the amount in the wallet decreases by 10 and when I press the serve a meal to the customer the amount in the wallet increases by 10. with use reducer you can Define more types as many as you need this way you can easily work with more complex logic in your react apps something that might be too difficult to rationalize when using use state to explore this in practice let's add another action type I'll name it celebrity visit this action should be triggered when a celebrity visits the restaurant which brings in five thousand dollars to the restaurant when it happens to make this work I've added another action type to the reducer function and then another button to trigger it I'll save my changes and preview the updated app in the browser there it's all working as intended clicking the celebrity visit button increases the wallet amount by 5000 and it's as simple as that now the little lemon restaurant will be able to keep track of their expenses so that they have a clear view of how much profit they're making from their business in this video you have learned about the use reducer hook how it differs from the use State hook and why you can be a beneficial and more efficient solution in certain circumstances imagine the owner of little lemon would like a search inventory functionality that would focus the cursor into the search input field in this video I will demonstrate how to code this specific requirement in a separate app so that you can focus on this particular functionality so here I have another example app built using creates react app or CRA note that for the purpose of this demonstration I have made some tweaks so that I can more easily showcase the use ref hook so my starting app is just a return statement with a fragment and inside of it an H1 that reads using use ref to access the underlying Dom as I'd like to demonstrate how they use ref Hook is used to access the Dom I will use it to focus the cursor into an input field so let me start by adding the input field I will also add a button now that I've added an on-click event handling attribute I need to define the focus input function to handle the button clicks for the sake of Simplicity my click Handler only accesses the form input ref object and then it accesses the focus method on the current property which exists on the form input ref object but what is this object and where does it come from this object is the return value of invoking the use ref hook so in this update to my function I'm invoking the react user function and I'm saving a ref object that is the value returned from that function invocation to a variable named form input ref I'm then setting the jsx expression of form input ref as the value of the ref attribute on the input element react will create the input element's Dom node and render it on the screen this Dom node is assigned as the value of the current property of the ref object this makes it possible to access the input Dom node and all its properties and values using the syntax form input ref.current since I want toaccess the focus function on the input elements Dom node I'm using the syntax form input ref.current.focus this allows me to move the focus to the input field so that it is ready to be typed into without the user having to click tap or tab into it this is now triggered on a button click to confirm that this works I will save all my changes go to my app being served in the browser click outside of the input box and click the focus input button great everything is working as expected you have just learned about using the use ref hook to hook into the Dom and work with the properties of a specific Dom node that you choose based on the task at hand well done you've reached the end of this module on react Hooks and custom hooks throughout this module you've explored Hooks and react in depth and covered many important Concepts and practical applications that will benefit you as you progress through the courseit's now time to recap the key lessons you've learned and skills you've gained your first lesson focused on the use State hook which is used to work with state in a react component you explored how to perform array destructuring using the use State hook and update State when using use State through the state updating function and even how to change State and response to user-generated events like button clicks you then worked through a detailed demonstration learning how to use the use State hook within a component including how to declare read an update state next you learned about side effects in relation to another important hook the use effect hook you discovered that side effects make a function impure with impure functions performing side effects such as invoking console log fetch or the browser's geolocation functionality in addition to learning about the use effect hook theoretically you learned how to use the use effect hook to perform side effects within functional components and to control when the use effect function is run using the dependency array through a practical demonstration recall that the dependency array determines when the use effect to hook will be invoked following the completion of lesson 1 of this module you should now be better positioned to work with State and react and to handle side effects in your components the second lesson of this module focused on the rules of hooks and fetch and Json data from the web first you were introduced to the rules of hooks in react and unpacked them these rules are that you should only call hooks from a react component function and at the top level of a react component function are allowed to call multiple State hooks or effect hooks inside a component and should make multiple hook calls in the same sequence next in relation to the fetch function you learned about the delegation of Duties in JavaScript referred to as a synchronous JavaScript you also learned about the fetch function itself which is a function that looks like it's part of JavaScript but is actually a way to call a browser API from JavaScript this led up to the lesson on fetching data using the state and effect hooks you worked through a demonstration where a call to the fetch API was used to get data from the web using react now that we've completed this lesson you should have greater insight into what happens if a developer doesn't follow the rules of hooks in react and be able to describe how data is fetched in both JavaScript and react in the third lesson of this module you learned about the use reducer hook and that it differs from the use State hook because it gets a reducer function in addition to the initial State you learned that the use reducer hook could be used in cases where the use State hook would be inefficient such as when you have complex State logic and how to implement the use reducer hook in your code you were also introduced to the concept of refs and how they can be used to go beyond the virtual Dom and access the underlying Dom elements as well as other applications and have the opportunity to explore coding your own custom hooks by completing this lesson you should be able to use the use reducer hook to track state as well as roll out your own hooks in your react apps you're making excellent progress now that you have a solid grasp of working with hooks it's time to take a deep dive into jsx which I look forward to guiding you through in the next module at this point you may be wondering how to define what jsx actually is and it may not be entirely clear how react works with jsx to describe a UI and produce a user-friendly and effective app well let's explore these Concepts in a bit more detail in this video you'll learn how react uses jsx to describe a UI the differences between components and elements and the general concepts behind the react declarative model the little lemon restaurant owners have been happy with their original website for a long time but as they have grown as a business they now want to add more features functionality analytics and user interactivity they are noticing that the original website was built in a way that means there are many limitations when it comes to these types of enhancements after seeking some advice they have concluded that they should develop an app using jsx and react they want to understand more about jsx and react so that they can build a rationale into their business plan so let's get started with jsx jsx is a syntax extension to JavaScript that react uses to describe what the UI should look like however even though jsx looks like HTML it's essentially a more powerful abstraction that combines both markup and business logic into an entity called a component so what is really happening from the moment you write jsx in your render function until reacts creates the desired assets for your pages to understand all the steps involved youneed to be introduced to the concept of elements in react by now you already have a good understanding of components and how your entire UI is represented by a tree of them you'll also know that the final web pages that react produces are nothing more than pure HTML CSS and JavaScript when react analyzes your rendering methods from all your components it takes the whole jsx tree starting from the root and creates an intermediary representation this representation is essentially another tree similar to before but where each node instead of being jsx is a plane object describing a component instance or Dom node and its desired properties this plane object is what reactor defines as an element an element is just a way to represent the final HTML output as a plane object it consists primarily of two attributes type and props type defines the type of node such as a button and props encompasses all the properties the component receives in a single object observe how the elements can be nested as in the button example via the children property when react creates the entire element tree starting from the root the root element specifies all the child elements as the children prop and each child element does the same thing until it reaches the end of the tree what is important about this new structure is that both child and parent elements are just descriptions and not actual instances in other words they don't refer to anything on the screen when you create them they're just objects after all but these objects are easy to Traverse and of course are simpler than the actual Dom elements so far you have been introduced to an example of a tree transformation with simple Dom nodes like a button in the elementary this is specified as the type property but the type of an element can also be a function corresponding to a react component imagine you have created a component to encapsulate the traditional HTML button named submit button in this case the type property of the element will point to the name of the component this is the fundamental idea of react both user-defined components and Dom nodes can be nested and mixed with each other in the elementary for example if you were creating a log out process for the little lemon restaurant app you could do this with a logout component in jsx in this logout component the jsx would translate to the following tree of elements that allows you to mix and match components and Dom elements as the type property without worrying about whether submit button renders to a button a div or something else entirely this keeps components decoupled from each other expressing their relationships through composition when react sees an element with a function type like the submit button it will know to ask that component what element it renders to with the given props so react will ask submit button again what it renders to and it will transform that into an element react will keep repeating this process until it knows the underlying Dom tag elements for every component on the page once react finishes the process of identifying all user-defined components from the Tree of elements it will convert them into Dom elements the result is what is generally known as the virtual Dom a JavaScript alternative representation of the real Dom now what are the steps involved when there is a new change in your UI first react will take all your jsx and produce a new UI representation as a tree of elements second it will compare it with a previous representation that is kept in memory third it will calculate the difference in a tree recall that since each node in the tree is a JavaScript object this diffing operation is very fast and finally based on that difference it will apply the minimum number of changes to the underlying Dom nodes in order to process the update and that's it you are probably starting to appreciate the beauty of the reactor declarative programming model in this video you have learned how react uses jsx to describe a UI the differences between components and elements and the general concepts behind the react declarative model you have also seen the react transforms your jsx into an internal tree of elements which are just JavaScript objects and it is that lightweight representation that lets react update your UI in a predictable way while being fast enough for high performance applications so the interesting thing about performance it's one of these things that you can make it or break it with just one line of change I mean of course sometimes it's possible that in order to improve a performance you have to rewrite an entire application and start over but sometimes small changes make a big difference [Music]

my name is murtara I'm a software engineer at meta based in the Seattle office at meta we really try to think about the different diversity and the different backgrounds that users come from and and what technologies they might be using to access our products so thinking about performance can make a big difference between gaining a user or losing a user because if the application is not performing it's not responsive it's not fast enough then people will not use it so so it's a big deal for us to think about performance when we're developing these applications you know it's never that our applications are just performance out of the box and and we we try to look for the things that can improve their performance performance is usually something that we build incrementally and and we get to it by making incremental changes because we may think that this is not important and it's more exciting to build a new feature it's more exciting to make something more colorful and performance is this kind of invisible thing that you may not notice it right away you may not be able to to show it and and brag about it but it's actually really important and it's it's an underlying part of the application that without it you can't really have have the applications you know one one of the things that react does really well and it's kind of what has made it Excel and and become so popular is that it's very efficient in building and rendering a web applications what react does really well is that it localizes the change such that if you need to change a small text you can only have the work for changing that small text instead of having to re-render the entire page which could be very costly for a computer to to execute so we try to look for bottlenecks and and then go dive deeper into this and and see why is this component so slow why is it taking so long how can we refactor this component to make it faster maybe we can delegate some of the computation to the back end so that we're not incurring this cost on on the user on the front end so the engineers and the product managers and the designers they all use the application while it's being developed as much as possible to be in the shoes of a user and and really feel the experience that they're going through when they're using our applications and then once there's enough confidence that this application is ready after checking all the boxes in terms of its performance its stability its usability and and as well as completeness then we release it in an alpha stage where there's a small number of users trying it out so we can get some feedback and as we gain more and more confidence throughout the feedback cycle then we Crank It Up to more users until it's it's completely released it's a very important part of the requirements for an application to be performant and usable and in order to achieve that there are certain design patterns and and well-established approaches that Engineers have developed over time that have known to work really well and increase performance of applications so like using memoization or delegating part of the processing to the back end so I encourage you to look for those and and find ways that you can introduce these design patterns in your application when designing react components one of the most important properties developers tend to overlook is the children prop the children prop which is a special property all components have is the foundation for the react powerful composition model say the little lemon restaurant wants to enable users to have accounts on their app this would mean processes would need to be built to create manage and delete accounts in the app these types of processes can be constructed simply and efficiently using component composition with children in this video you will learn why component composition is so important and how to effectively use and appreciate the children prop you will also learn about two key features of composition and you'll explore some practical examples that will help you understand how you can leverage it so your components are more robust and reusable there are two main features that enable component composition containment and specialization let's break down these two main features now starting with containment containment refers to the fact that some components don't know their children ahead of time this is especially common for components like a sidebar or a dialogue where they delimit a specific area in your UI to contain other elements you can think of them also as generic boxes in case you don't know a dialogue is a type of modal window where the rest of the UI is disabled until the modal is addressed and interacted with for these component boxes the recommended approach is to use the children prop to pass children elements directly as their content let's explore this with a dialogue example here you have a dialog component which acts as the Box taking care of styling the container to make it look like a modal window by using the children prop it has become a generic component to which we can provide any valid jsx as children to illustrate that the confirmation dialog component has been defined which uses the dialog component and renders as children a title and a description this example also showcases the second feature of component composition specialization specialization defines components as being special cases of other components in this example the confirmation dialog is a special case of dialogue now that you are familiar with the basics of component composition let's go ahead and code an application to demonstrate what you've learned this application has been created with create react app imagine little lemon would like to offer an easy way for their users to delete their accounts if they want to the goal is to build a generic dialogue component that will contain a title a description and a warning button to make sure users are aware of the action's consequences all using component composition I have already created two generic components a button and an alert the button uses the children prop to specify its text and the alert is a generic box that renders an overlay in the background and a white modal in the center of the screen the children prop determines the content of that modal the first step is to create a warning button using the specialization feature of component composition for that I'll Define a new component named delete button where I'll render the button component and configure its properties to have a red color and the text delete then I'll go ahead and render the alert component as it stands it's just a generic white box or container this illustrates the second feature of component composition which is containment I can customize the content of the Box in any way I would like by just providing jsx as its children to fulfill the requirements of little lemon I'll create a header titled delete account as well as a paragraph to inform the user about the action I want to State clearly that they will miss out on the chef's delicious recipes if they delete their account so I'll reflect that in the description finally the last piece is to render the delete button as defined previously and that wraps it up in this video you have learned about a react technique called component composition and why it is so important you also learned how to embrace the two key features of composition containment and specialization and to explore some practical examples that helped you to create components that are more robust and reusable using the special children prop react children is one of the special props all your components have implicitly that along with the react composition model enables a new paradigm of component design so far you have discovered how to leverage this special prop in read mode only meaning that your components consume it as it is provided but what if I told you that you can go even further and transform your children's elements in any way shape or form to illustrate say the little lemon restaurant wants a way to visualize a summary of live orders as they come in from customers what would be really useful for the chefs working in the kitchen is to display each customer order in its own separate row with the name of the dishes the amount of each dish the total price the time of submission and the full name of the customer well by using a set of new react apis that will enhance your component design skills you will be able to solve this problem for little lemon with a smart and efficient solution let's start by exploring two of these powerful react apis react.clone element and react.children in this video you'll learn how to use both of these react apis and how they can be used to manipulate the render output dynamically let's explore the first of these apis react.clone element in more detail this is part of the react top level API and it's used to manipulate and transform elements top level API refers to the way you would import those functions from the react package you can either import react as a global object in the top of your file and access them as methods on that object or alternatively as a named import recall that elements are just plain JavaScript objects the react uses internally to describe what you want to appear on the screen react.clone element effectively clones and returns a new copy of a provided element the first argument is the react element you would like to clone and the second argument is the props that will be added and merged with the original props passed into the component remember that props in react are immutable objects so you must create a copy of the element first and perform the transformation in the copy that's exactly what react.clone element allows you to achieve this API is useful to allow a parent to perform the following operations modify children properties add to Children properties and extend the functionality of children components for example you could add another prop dynamically to the submit button element Illustrated before another important top level API useful for children manipulation is react.children which provides utilities for dealing with the props.children data structure the most important method is the map function react.children map is very similar to the map function from arrays and invokes a function in every child contained within its children prop performing a transformation and returning a new element don't worry if those apis still sound a bit confusing let's get into some code to give you a better picture the little lemon restaurant is busy receiving live orders to visualize a summary of those orders I have been tasked to display each one of them in a row having a fixed horizontal spacing between each piece of key information in this application there is an order that has been submitted for a client requesting a pizza margarita each order contains the name of the dish amount total price time of submission and full name of the client I have created a row component that will handle the separation per item at the moment it just Returns the children as they are provided so all the items on screen are cramped with no separation let's go ahead and use both react.clone element and react.children.map as the implementation to solve the separation problem the first thing I'll do is use the children.map function to iterate through each child so far I am returning each child as it is so still no changes on the screen to implement even horizontal spacing I am going to add some custom style that will set some left margin in each child except for the first one in order to specify the amount of space I will create a new prop called spacing that will be the number of pixels and will use string interpolation to set the margin style properly in pixels now that the style is defined I need to attach it as the style prop in each element so in the map function callback I'll return a new copy of the element using react.clone element the second argument is what lets you specify the new props in this case I'd like to add a new style prop that will merge the previous Style if the element is not the first child then I'll also merge the child style object that contains the margin left statement great the last step then is to use the spacing property in the row component let's set it to 32 pixels and there you go each live order now presents all the information clearly so that chefs don't make any mistakes and cook the wrong Pizza in this video you have learned about two new apis react.clone element and react.children.map providing you with a powerful tool set to manipulate children dynamically with ease the spread operator is one of the coolest additions to the JavaScript language thanks to the spread operator which is represented by three dots common operations that previously required a bit more code like cloning an object or array are now so much simpler so in this video you will learn how to use the spread operator in objects how to spread native properties to Dom components how to design flexible components and about the caveats when using the spread operator imagine that the little lemon restaurant wants to have a simple welcome screen where users can sign up or log in depending on whether they have an account or not the sign up and login buttons are in nature very similar with differences in the text and the action taken when they're clicked to achieve this implementation you could Define a button component that encapsulates the native HTML button element and uses the same props as its native counterpart however a button presents dozens of different properties for customization instead of having to specify each of them manually the spread operator can be used to forward all of them without typing each one manually react Embraces this operator at its core when it comes to props but before digging deeper let's refresh what this operator enables for objects in pure JavaScript the spread operator can be applied to different data types in JavaScript such as arrays objects and even strings since react props are just objects this lesson is going to be focused strictly on the object type copying and merging objects are the two main operations you may perform with these operators for a simple copy of an object this is the syntax required curly braces and the three dots preceding the object a copy in this example order amend represents a last minute change to the type of pizza ordered by the customer for merging first you need to spread the properties from the original object and then provide the new properties to be added or to replace original properties the property called item has been replaced with the New Order information great now that the preliminaries are covered let's explore how react uses the spread operator this order list component example renders an order component each order component expects four props an ID username item and price this first example shows how you might usually do it passing all the props in the return statement explicitly however this can be simplified if you already have the props your order component needs in an object here you can see that only the spread operator is required in the return statement saving us Time by just spreading all the props and avoiding having to type them manually this pattern allows you to create flexible components but there are also some caveats you need to keep in mind when using the syntax let's explore this in more detail with an example demonstration in this application I have created a simple welcome screen for little lemon restaurant where users are able to sign up or log in depending on whether they have an account or not at the top I have defined a button component that wraps the native button from the Dom this component expects the same props as its native counterpart with the addition of the type prop which is a custom prop that determines the background of the button based on the theme provided here is a clear example of using the spread operator to group all the props that belong to the native button and explicitly extract the custom props I have defined for this component and are react specific type and children this implementation is clean for developers since they can provide all the props a native button would expect the second example is a login button component that renders the custom button component I have created itself this login button does some pre-configuration by fixating some of the props from the button component in this case type and on click while still passing the native button props down with the spread operator now the app component renders the two buttons and uses the button component for the sign up and the login button component for login the buttons are both configured here to send the user to the sign up page unless they have an account in which case the login button component's original on click function will send them to the login page I have also provided both with an on click Handler to show an alert about the intended action when the button is pressed however observe how I have mistakenly provided the same alert message that is used for sign up on the login button component hence overriding the on click Handler that the login button already defines now can you guess what the message of the alert will be when I click on it I'll give you a few seconds to think about it well if you guessed logging in you guessed right the reason is that even though I have overwritten the on click prop in the login button component its implementation is done in a way that prevents that overriding from happening why is that because of the order of the spread operator if I go ahead and spread the props at the end instead right after on click the behavior is different and signing up is output instead so what are the main takeaways from this lesson the spread operator is a great tool that enables the creation of more flexible components especially when forwarding props automatically to other components that expect them as well as providing your consumers with a nice component API however keep in mind that depending on the order of the spread the behavior May differ so you need to be conscious about your decision when it comes to component design in the example of the login button before it may make sense to prevent the override of the on click property but it may not be the intended case for other props well done I hope you're getting an idea of the multiple benefits that can be gained from using these react tools when building react applications you will find yourself creating some generic functionality that is not related to the application's business logic and that is needed in many places for example think about managing different permission roles handling errors or even logging they are all required for any application but are not necessary from the business point of view this group of functionality is what falls into the category of cross-cutting concerns in this video you are going to learn about cross-cutting concerns and why components despite being the primary unit of code reuse in react aren't always a good choice for this kind of logic you will also discover why new patterns were introduced to solve this problem excited to learn more well let's get started imagine that you are tasked with building the logic to display a list of live orders for the little lemon restaurant app let's explore how this could be achieved here is a valid implementation for a live orders list where local state is used for storing the current list of orders and use effect handles both the subscription and unsubscription to the live data updating the orders value as soon as a new order arrives now imagine the little lemon also needs a place in the application to keep track of the number of users subscribing to its newsletter in real time this could be a valid implementation for such functionality can you identify any similarities between live orders list and newsletter list they are definitely not identical since they call different methods on data source and render a different output but much of the implementation is the same upon examination they both add a change listener to data source on Mount set new state whenever the data source changes and remove the change listener on unmount you can imagine that in a large app the same pattern of subscribing to data source and setting local state with new data will occur over and over again so far you have seen that a custom hook to encapsulate that logic is one of the solutions at your disposal however that introduces the issue of having to alter the implementation of each component that needs that data and thus making all of them stateful so how could you define the subscription logic in a single place share it across many components and keep them unchanged and stateless well this is where higher order components are a perfect solution a higher order component also known as a hoc is an advanced pattern that emerges from reacts compositional nature specifically a higher order component is a function that takes a component and returns a new component whereas a component transforms props into UI a higher order component transforms a component into another component in other words it enhances or extends the capabilities of the component provided let's go ahead and examine how the implementation of this reusable subscription logic would look with a higher order component with subscription is the higher order component that takes the wrapped component you would like to enhance with subscription capabilities as well as a select data function to determine the type of data you are getting from the data source in this case either orders or users with subscription then returns a new component that renders the provided component and supplies a new prop to it called data that will contain the most recent list of items from the data source of Interest it also passes other props through to the wrapped component which is a convention in hocs that's the implementation but how about its usage in this case you would Define two different components configured with custom parameters one for live orders and another for newsletter subscribers all without having to repeat the subscription implementation in either live orders and user list making this a much more efficient solution there is still one more pattern for cross-cutting concerns that you will learn about soon called render props great in this video you have learned about cross-cutting concerns and why components are not always enough for reusing Behavior you also explored one alternative pattern to encapsulate common behavior and react applications which are higher order components the little lemon restaurant is receiving a spike in visits to their website during the last month due to customers loving some of the special pizzas the chef presented to the public despite the success there are some pizzas that aren't receiving the same level of attention so they have decided to implement some basic analytics to better understand which are the best sellers and which ones are not being ordered so regularly for that they would like to track the mouse position of the visitors when they are in the pizza section so that they know exactly which pictures are capturing people's attention and which ones are overlooked in this video I'm going to show you how to implement such functionality by using a higher order component or hoc which will be in charge of encapsulating the logic and state to track the cursor position of the visitors then I'll showcase two different presentational components that will consume that data and present it in different ways are you ready let's begin the little application has been created with create react app so far in the rendering part of the app component there is a header displaying the title of the restaurant and two components panel Mouse logger and point Mouse logger they both expect a mouse position prop and will return null if that prop is not provided that's why at the moment they don't render anything at all you could implement the mouse tracking logic in each component but recall that it would incur code repetition and duplication of the same logic in two different places that's why the recommended approach is to use one of the techniques that react provides for encapsulating cross-cutting concerns in this example I will illustrate how to do this with an hoc I will call this hoc with mouse position the width part of the name is a general convention recommended by react since it expresses the enhancing nature of the technique like providing a component with something else recall that an hoc is essentially a function that takes a component and returns a new component let's complete the initial scaffold and return a component that will render the raft component provided to the function without forgetting to spread the props it receives so that they are passed through great now to track the position of the cursor I would need to define a new piece of local state which I'll call Mouse position for the data and set Mouse position for the state setter the initial state will be an object with two properties X and Y to define the two-dimensional coordinates on the screen and I will set both to zero x equals 0 and Y equals 0 represents the top left corner of the screen next I would need to set a global listener in the window object for the mouse move event since this is a side effect I need to perform the subscription and unsubscription logic inside use effects let's go ahead and do that I will add a new event listener for Mouse movement to the window object for the Callback I will name the function handle Mouse position change that for now doesn't do anything it's important to remove any subscription when your component unmounts the way to do that is by returning a function from use effect and then performing any cleanup needed in this case I would have to use the window.remove event listener passing as arguments the mouse move event and the same callback function as before to complete the logic and set the state with current Mouse position I need to read that information from the browser event object which is passed as an argument to the Callback that event object contains two properties that Define the coordinates client X and client y so I will assign both of them to the corresponding Dimension and finally the last step to complete the implementation is to set a new prop called Mouse position in the wrapped component to pass that information down to all components that are interested in that data great so now that the implementation of the hoc is finished let's add the last few pieces to display the mouse position on the screen to enhance the two components previously defined panel Mouse logger and point Mouse logger I will use the hoc to create two new component versions that will be aware of the mouse position data and I'll call them panel Mouse tracker and point Mouse tracker respectively finally I will use the enhanced versions in the rendering part of the app component amazing the requirements are now finalized if I move the cursor around the screen you can see two different trackers that display the same information in different ways one has a panel and the one below as a data point well that's the end of this video little lemon restaurant now uses this solution to track their Pizza loving customers and have discovered that something was affecting the sales of their Pizza diavola guess what after an employee investigated that particular Pizza on the app they noticed that one of the photos was a bit blurry thanks to this little tracking application they have now taken action and uploaded new high quality photos so the next time a customer is exploring the menu they won't miss the pizza diavola so far you have learned about a technique called higher order components that is used to encapsulate common functionality but it's not the only one available to you for example you can choose between different eating utensils depending on the type of food you're eating some chopsticks for your favorite Sushi dish or a fork for a delicious carbonara but there's nothing wrong with using a fork for eating sushi after all not everyone has learned how to use chopsticks and it's the tool that makes the job easier that matters well this is also the case when it comes to code reusability there are several tools you can use to share code between react components and in this video you are going to be introduced to a new one the render props pattern say the little lemon restaurant is looking for a way to keep count of all the items it has on the menu they would like to display this information in the application so they know when they need to replenish stock and to make it easier for customers to see what is or isn't available at any given time that information is stored on a server so we would have to be fetched first prior to displaying it there are various ways to define the fetching logic like a higher order component however render props is also a powerful technique you can leverage to reuse common code the render props technique is so appropriately named that it's almost self-explanatory it's about using a prop called render with a particular attribute that it has to be a function to be more precise a component with a render prop takes a function that returns a react element and calls that function inside its render logic for example a meal provider component could use this pattern if you remember a higher order component enhanced a component by providing new props into it with render props however the new props are injected dynamically as the parameter of the function you may already have recognized some similarities between the two the end goal is the same to enhance components without modifying their original implementation the way in which they inject those new props or enhancements is what differs to better illustrate this point let's explore an application that showcases the implementation of a component that uses a render prop in this example the little lemon restaurant would like to keep a count of all the desserts and drinks that it has in the menu that information will need to be fetched from a server that they control and displayed in the application with a single piece of text the logic for fetching data is one example of a cross-cutting concern multiple components may depend on data that live somewhere else but you don't want to implement the same fetching logic over and over in every component that needs it right this is a good place to use the render props pattern to abstract this functionality to Showcase how it works I have created a component called Data fetcher whose only purpose is to fetch data based on a URL this is one of its props but it's the second one that should catch your attention and that's the render prop I'm not fetching real data in this example but I have created a mock if else statement that will return either a list of all desserts or drinks available based on the URL path as usual this fetching logic is a side effect that should be placed inside the use effect finally let's move to the return statement this is the unusual part the component is returning the result of calling the render function and has no other rendering business this is what makes it very flexible data fetcher only has one purpose fetching data and the way they receive it is via the argument in the render function which is the local state used to store the list of desserts or drinks it's then up to the developers to decide how they would like to present that data on the screen finally let's explore the two presentational components I have defined to show the number of Desserts and Drinks available in the menu the desserts count component uses a particular end point to fetch desserts and uses a paragraph element as the render prop displaying the number of desserts as a single text the same applies to the drinks count component with the difference being that it utilizes another URL and instead shows a header element reflecting the number of drinks finally the app component renders both of them and the results are displayed on the screen you have learned about another technique you can use in addition to higher order components which is the render props pattern hopefully now that little lemon keeps a live count of drinks they can replenish their fridge with your favorite refreshments as the developer for little lemon's restaurant application how could you guarantee that the app you created works as intended well you may choose to rely on your methodical ability to manually interact with all the different parts of the application yourself ensuring the app is fully functional however manually testing every new incremental change you'd like to make is likely to be tedious error prone and time-consuming especially as your app grows in complexity that's where automation tests come in so in this video you will learn how to write tests properly for your react components you will achieve this by exploring why testing is important and best practices when creating tests being introduced to the tools jest and react testing library for structuring your tests as well as working through a practical example of testing a component using these tools just like factories perform testing of the products they build to ensure that they work as expected developers need to do the same with their code a well-designed suite of automation tests is particularly effective in allowing you to discover defects or bugs before delivery to the client in doing so testing is important for guaranteeing the quality of the software you develop further by catching bugs before they find their way into a live application testing reduces the number of user complaints and can ultimately save an organization time and money now that you have an idea of why testing is important what are the best practices you need to keep in mind when writing your tests the first is that your tests need to avoid including implementation details of your components react is just a tool and your final users will have no notion that react exists at all so rather than dealing with instances of rendered react components your tests should work with actual Dom nodes secondly the more you test resemble the way your software is used the more confidence they can give you finally you also want your tests to be maintainable in the long run so as long as you're not changing functionality any changes in the implementation of the component won't break your tests and slow you and your team down let's explore the two tools that react endorses to structure your tests jest and the react testing Library jest is a JavaScript test Runner that lets you access an artificial Dom called JS Dom while JS Dom is only an approximation of how the browser works it is often good enough for testing react components jest provides a good iteration speed combined with powerful features like mocking modules so you can have more control over how the code executes recall that mocking refers to something made as an imitation and enables you to replace complex functions from your code with others that are simpler and simulate the same behavior mocking features can be used to make sure that your unit testing is standalone if you'd like to revisit the concept of marking in Greater depth you can check out the additional resources at the end of this lesson the second tool is react testing Library which is a set of utilities that let you test react components without relying on their implementation details react testing library has been designed to fulfill all the best practices highlighted before so that you get a well-configured testing environment out of the box and are able to focus on the business logic your tests need to run assertions on with the theory covered let's go ahead and Implement a test from scratch using jest and react testing Library when you start a new project with create react app you already get both jest and react testing Library pre-installed by default plus both tools are already pre-configured and there is an example test file in your root folder called app.test.js imagine that little lemon has made an agreement with a popular restaurant aggregator to have its web page included as a new URL in its listing in the app.js file the app component renders a link in the page that points to little lemon's web page let's go through the test I created to automatically verify that the link is always present the first thing I need to do is to import both render and screen from the react testing Library the render function is used to render the component you would like to test and perform assertions against because querying the entire document.body is very common react testing Library also exports a screen object which is a reference to that object and has every query pre-bound to it meaning that it will automatically ask the whole document when running a search now to wrap the test scenario jest provides the global test function which takes a text description as the first argument and a function to compose all the steps your test needs to go through as a second argument this function does not need to be imported since jest injects it automatically in all your test files the first step is to render the app component in the artificial Dom environment secondly I use the screen object to create a query against the document.body in this case I am using the get by text utility to ask the body tag of the document if it can find an element inside with a string called little lemon restaurant and store the result of that finding in the link element object if the search is successful get by text will return the found element otherwise it will return null finally to complete the test I perform an assertion asking whether the link element from the query above is present in the document meaning whether it's currently visible on the screen for that the global expect function is used this is another utility that just incorporates globally without the need for an explicit import the expect function receives the result of a query and appends a specific matcher in this example the matcher refers to an element visible in the whole document if I run the test it fails okay let's check the output logs to try to understand what has gone wrong it states that it was unable to find an element with a text little lemon restaurant interesting let's go ahead and check the app.js component again aha I had made a mistake and typed orange instead of lemon something that the test was able to catch that's exactly what you want to see when a failure occurs also you might have noticed how straightforward it is to write your test assertions everything you see in code translates nicely to how a real user would interact with your app and responds with the behavior that you would expect let's run the test again now that the issue is fixed great the test passes and little lemons online exposure is about to grow even more in addition to the importance of testing and testing best practices you have now learned how to test your react components using jest and the react test Library stay tuned because soon you will discover how easy it is to write more complex tests imagine that the little lemon restaurant started receiving a few bad reviews from its customers the problem is that they could not figure out what was wrong and act accordingly since users only provided a low numerical score skipping the part of providing additional feedback and passing that information to the chefs in order to solve that they've decided to make the common text box mandatory as long as this core provided by their users is lower than 5 in a scale to 10. additionally they would like to Shield this New Logic with automated tests so whenever any changes are performed the test Suite would run and be able to catch any potential errors incurred by a faulty update so the application consists of a feedback form that contains a range input for a numerical score ranging from 0 to 10 and a text box to incorporate additional comments to satisfy the requirements desired by little lemon the submit button will be disabled if the score is lower than 5 forcing users to add a comment of at least 10 characters now let's examine the code the entry point is the app.js component where I'm rendering a feedback form component this component receives a prop on submit which is a function that contains the values of the form as parameters so that the parent app component can perform the submission the feedback form represents an HTML form and includes two control components via local state a range input and a text area there are two pieces to highlight in this component the first is the button disabled logic is disabled is the variable that controls that state and is set to true if the score is lower than 5 and the comment has less than 10 characters the other important piece is the handle submit function which is hooked into the form on submit attribute when the submit button is clicked the handle submit function will be called this function itself calls the prop function provided by the parent with the corresponding form values well it's clear that the feedback form component contains all the business logic of Interest so let's go ahead and write a test for the submission Logic the convention for test is to create them inside a file that has the DOT test extension that way just the test Runner is able to pick them up automatically when you run the test command in your terminal as I have already written a test scenario I will now walk you through each line of code so that you understand how the test is structured step by step the test scenario is checking that users are prevented from submitting the form right away if the score is lower than 5 and there is either no additional feedback or it's too short first I create a new mock function with just recall that a mock function is a special function that allows you to track how a particular function is called by external code when the feedback form calls the function you provide as the on submit prop you will be able to explore the argument passed in the call then I render the feedback form and pass the mock function as the on submit prop the following steps are needed to locate the range input and fill it with a value notice that to find the input I'm using the screen dot get by label text and passing a regular expression to match against screen is a utility object from react testing library that represents the whole page which basically translates to asking the root document to find a label tag whose text contains the word score and then return the input element associated with that label to fill the input with a value you have to use the fire event utility from react testing library and call the change function while react control components update their state via the on change prop react testing Library follows a slightly different convention removing the on part and having the update method as lowercase to simulate the form submission I have to locate the button element observe how I'm using a different query method get by roll which looks at elements with a specific crawl attribute this will work well since the HTML button already has the button role internally set to simulate the event I need to provide two arguments first the input element in question and second the browser event object which holds the new value as target.value to perform a button click I have to use fire event dot click it follows the same Convention as before removing the on-site of the prop and having everything in lowercase great the final two statements are the assertions of the test the first one illustrates an example of an expect matcher that wants to check the opposite by prepending the Knot Before calling the final matcher what it's asserting is that the function that handles the submission of the form has not been called which is what I'm expecting when an additional comment has been omitted furthermore I have added a second assertion to make sure the submit button is indeed disabled by using the to have attribute matter and that's it well done for reaching the end of this demonstration in this video you learned how you can Shield your business logic with a few lines of powerful code thanks to the react testing library and what's more important it has enabled the chef at little lemon to finally receive the necessary feedback and make sure all the new pizzas have a bit more extra cheese on top so I am passionate about style guides I actually used to be really bad and really used to dislike them and think like they're not important but now if I see something that's out of style I like really noticed it and it's like it's so it's to me it's very frustrating so now I I take them seriously

[Music]
foreign [Music]
I'm a software engineer at meta based in the Seattle office so a lot of the times people think style guides are silly or useless and they they may not actually give them a lot of value I see this with a lot of new developers when I'm reviewing their code a lot of my comments are actually about styling and it may seem like I'm being annoying or I'm being nitpicky about unimportant things because following style doesn't functionally change the way code works it just changes the way the code looks and so people are like well why does it matter this still does the same thing but it matters because it makes code much easier to read it makes code much easier to debug and work with and this is a big deal because a lot of times when we're writing code we're not just writing it for ourselves we're writing it for other people so paying it up front and taking the time to style your code correctly is is really worth it one of the things we look for in in the following style guides is to make sure that code is self-documenting and and that really helps so that developers are not taking the time to write comments and being elaborate in explaining things where if you look at the code you can understand it and and read it and it documents itself just by the way that variables are named or by the way functions are structured and that's really important because it removes the burden from the developer to write documentation and also removes a burden from other developers to read the documentation it also makes it easier to fix problems if when somebody new is looking at the code then a lot of times we write code and then we don't keep writing or or improving it or maintaining it somebody else comes and so it's a service to the people that come after us that we write code in a clean well styled way so that when they look at it they're they're actually able to understand it easily at meta we have a team or a bunch of teams that are kind of the owners of setting the style guides to make sure the company is following similar or consistent guides across the different code bases because style guides are one of those things that could involve different opinions and tastes and and different ways to achieve the same thing we want to be consistent even if there's multiple ways to do the right thing we want to choose one way and stay consistent across our code base just so that developers are not confused when they look from one part of the code base to another everyone at meta is using or following the style guides that are created and managed by by the teams responsible for them so I I'm a engineer developer and I I'm daily following and using these style guys just like everybody else in the company who's writing code learning about coding and style guides you know it may seem like why do I need this and and it's actually not that complicated you you need it because it's like an investment following these style guides and adhering to them and learning the good style guides will make a big difference in in the application and its stability usability readability as well as anything that you do in the future to improve it whether you're adding new features or you're fixing a bug so it may seem like it's it's the unimportant part of developing and writing software but it actually makes a big difference if you're writing code for the long term well done you have reached the end of this module on react to jsx Advanced patterns and testing let's take a few minutes to review what you have learned so far you begin the module with an in-depth lesson on jsx you were presented with a distinction between components and elements you learned that components are functions that take data or props as an input and return a tree of elements as output you also learned that elements are just plain JavaScript objects that offer a lightweight representation of the Dom and let react update your user interface in a fast and predictable way next you discovered the importance of component composition and the use of the children prop you were introduced to containment and specialization the two main properties that component composition has you learn that containment is a technique that is applicable to components that don't know their children ahead of time like a dialogue or a sidebar and that it uses the special children prop to pass elements directly as their content you were also introduced to specialization a technique that allows you to define components as special cases of other components like creating a confirmation dialog based on a dialogue then you moved on to a lesson about manipulating children dynamically in jsx here you were introduced to a couple of new react apis react.cloneelement and react.children you learned the react.clone element clones and returns a new element allowing you to manipulate and transform elements directly in your jsx you also learned the react.children.map is useful for children manipulation and that when used in conjunction with react.clone element enables a powerful composition model for creating flexible components you worked through a practical example of those two apis where a row component was implemented to separate its children evenly finally you were introduced to the spread operator in react you learned that the spread operator enables two main operations and objects copying and merging you then saw how react uses that operator to spread all the props instead of having to type them manually one by one finally you were presented some practical examples that Illustrated how the spread operator allows the creation of flexible components you then moved on to a lesson on Advanced patterns to reusing common Behavior the lesson started with an overview of cross-cutting concerns in react you learned that cross-cutting concerns refers to generic functionality that is not related to the application business logic and that is needed in many places like handling errors authentication or fetching data you understood why components despite being the primary unit of code reuse and react don't fit this type of logic after that you were presented with two techniques for cross-cutting concerns the first technique you were introduced to was the higher order component technique which you learned enables a powerful abstraction for creating cross-cutting concerns you were also presented with an example of how data fetching can be abstracted using this technique as part of a practical lesson on higher order components you learned that a higher order component is just a function that takes a component and returns a new one you were presented with a required code structure to create a higher order component and examine an application of a higher order component that handled the position of the mouse pointer on the screen then you learned about the second technique for cross-cutting concerns called render props which is a special prop you add to your components with a particular attribute of being a function that returns a react element you discovered that as opposed to higher order components the new props are injected dynamically as the parameters of the function and worked through a practical example where the render props technique was used to abstract the functionality of fetching data from a server the module ended with a lesson on component testing using react testing Library the lesson began with a comprehensive explanation as to why react testing library is the recommended tool for your tests you learned that to guarantee that your applications work as intended a suite of automated tests is crucial you were presented with best practices when it comes to testing seeing how the react testing library has been designed with all of them in mind finally you were introduced to a basic example of a test with jest the recommended test Runner and react testing library to illustrate the basic scaffolding of a test the lesson on component testing concluded with a practical application of tests in a real world example with this you learned how well-designed tests can catch errors in your code providing you with the necessary context to fix them you also discovered a more complex application that can be easily tested with a few lines of code then you were presented with several apis from react testing Library like screen to query on the global document in different query types like querying by text or querying by role lastly you learned about different matters for your expectations and assertions like to have been called for mock functions and to have attribute for attributes in your elements fantastic work congrats for getting to this point in the course it's time to use everything you have learned so far and build some amazing applications in this course you learned about Advanced react let's take a few moments to recap the key topics that you learned about in the opening module you received an overview of components during the first lesson you received an introduction to the course you discovered how to set up a project in vs code and you learned how to make the most of the content in this course to ensure that you succeed in your goals you then moved on to the next lesson in which you learned how to render lists and react in this lesson you learned how to transform and render list components create a basic list component and you learned about Keys within list components in react in the next lesson you explored forms in react first you learned about the differences between controlled and uncontrolled components next you discovered how to create a controlled form component in react and then had a chance to test your skills by creating your own registration form in the last lesson you learned about react context you explored props and state and how they relate to context you also learned how re-rendering works with context and you applied your knowledge to create a light Dark theme switcher next you begin the second module which covered all the common hooks in react and how to build custom hooks in the first lesson of this module you got started with hooks you learned how to implement the use State hook to work with complex data and apply this knowledge to manage state within a component you also learned about side effects and the use effect hook in the next lesson you moved on to the rules of hooks and fetching data with hooks you discovered the essential rules of hooks and how to use them effectively in your Solutions you also gained an in-depth explanation on how to fetch data using Hooks and tested your skills in fetching data in a practical exercise in the final lesson of the module you enhanced your Knowledge and Skills with Advanced hooks you learned about the benefits of the use reducer hook and how it differs from you state and how to access the underlying Dom with use ref you then build your own custom hook use previous in the third module you explored jsx in more detail and how to test your Solutions in the first lesson you took a deep dive into jsx you gained a more detailed overview of jsx components and elements next you explored component composition with children with its two key features containment and specialization and how to dynamically manipulate children in jsx you have the opportunity to apply your new skills when building a radio group component and were introduced to spread attributes in jsx in the next lesson you focused on reusing Behavior you learned about cross-cutting concerns in react and explored higher order components and how they're used to great effect you also learned about a specific hoc called render props and used render props to implement scroller position tracking in a solution in the final lesson of this module you were introduced to integration tests with react testing Library you discovered jest and the react testing Library you wrote test scenarios for a form and were introduced to continuous integration you've reached the end of this course recap it's now time to try out what you've learned in the graded assessment good luck let's now work through what I've produced and please if you find something that inspires you don't hesitate to incorporate it into your own solution as well alright let's get started I'm using a UI Library chakra UI that offers a preset of styles for your react components that allows me to avoid worrying too much about CSS and focus on the business Logic for my portfolio page let's have a quick overview of the whole application the layout consists of a header that contains links to all my relevant social media accounts and links to the different sections of the page there are three full screen sections a landing section with a profile picture and a quick description about myself a project section with a list of all past projects I've worked on and finally a contact me section to allow visitors to contact me by filling out a simple form finally there's a footer at the bottom this application Level layout is defined at the entry point the app.js component besides the two providers at the top everything inside the main tag translates to the different UI boxes that I described previously header Landing section project section contact me section footer and alert the alert component plays the role of a global dialog that I can trigger from anywhere in the application using react context let's go into each section top to bottom starting with the header components its rendering section begins to illustrate one of the compelling points from the chakra UI Library first Checker provides you with generic boxes like box H stack for horizontal Stacks or rows and V stacks for vertical Stacks or columns that use the special children prop to place their content As You Wish using properties such as padding margin or spacing secondly chakra uses props for all CSS Styles as well as additional ones like spacing to evenly separate a group of children siblings or in other words add similar gaps between them I'm rendering a list of social icons using the map function picking as key their URL which is unique per item now if you examine this rendering you will find two of the core react hooks use ref and news effect those two are used in conjunction to achieve this smooth animation of the header you can find out more about the implementation details in a further reading okay let's now check the next component Landing section there's nothing particularly special about this component it's just a presentational component that encompasses the whole screen height and lays an image and text in the center still there is a great component I created that uses some of the techniques you have learned the full screen section component here's a component that leverages both the children prop and the spread operator its goal is pretty simple to create a full screen container box with 1280 pixels as width with a specific background color and text color depending on whether the background is dark or light the spread operator allows you to pass down other layout props to the vertical stack components in case you would need further customization next there is Project section this is another presentational component that renders all my featured projects in a grid layout and finally I will move on to the star of the show the contact me section component this is probably the most interesting component of them all since it implements a controlled form with validation and handles some aspects of internal state to simplify the form business logic I have decided to use another library that is well known within the react Community formic formic is the most popular open source form library for react and it stands out due to its declarative nature allowing you to spend less time wiring up State and change handlers and more time focusing on your business logic looking at the application I have added four inputs one text input for the first name another text input for the email I select input to pick the type of inquiry and finally a common text area to define the configuration of the form you would have to use the use formic hook this hook takes a configuration object that is intuitive and easy to follow initial values defines the initial state of the form on submit is a function that will be executed once users click on the submit button and validation schema specifies the validation rules for this form on the client side formic works very nicely in conjunction with yup a library that lets you define your validation in a declarative way using a chain of operators the hook returns a formic object that is what you have to use to wire up your inputs with the formic internal State now let's explore the business of rendering I have grouped each input into a form control component which is imported from Chakra for example the first name has a label the input itself and a component to display any error messages occurring for that particular input there is invalid prop in the form control determines whether the error message is shown or not for the first name it would happen if there is an error according to its validation rules and it has been touched meaning the user has already focused the input at least once and the input component I would have to hook the state and change handlers by using formic.getfieldprops with a value of first name as the parameter which would have to match the property name used in initial values and spreading the results which is an object with all the props you need to connect from formic so if I go to the form Focus the first name input and then blur it an error message pops up on the bottom with a hint required nice isn't it the remaining inputs follow a similar pattern so I won't focus too much on them finally we have the form submission remember the on submit property from the use formic hook configuration that's the function that will be called when the form is submitted and that function an API call is performed to the endpoint to submit the form along with the form values finally they use effect hook listens to changes in the response value and once the server responds it will open an alert showing a dialog with a confirmation or an error message this API call is just a simulation for the purpose of the exercise and is programmed in a way that has 50 chance of being successful if the response is successful the form is reset and cleared using the reset form function from the formic object well let's explore the form in action I will fill the form with values click submit and voila here's the alert we can try again to show the opposite state so there you have it this is one possible solution to the portfolio exercise I'm really looking forward to seeing which approach you took to complete this challenge you've reached the end of this Advanced react course you've worked hard to get here and developed a lot of new skills along the way you're making great progress on your front-end developer journey and you should Now understand how to use more advanced react features test your react applications and use jsx more proficiently you were able to demonstrate some of this learning along with your practical react skill set in the lab project following your completion of this course and advanced react you should now be able to render list and form components efficiently in react demonstrate how context provides a way to share Global values between components with a defined API and potential applications use all common hooks in react and put them to use within your application and build your own custom hooks the key scales measured in the graded assessment revealed your ability to understand jsx in-depth use Advanced patterns to encapsulate common Behavior via higher order components and render props write tests for your application and build a portfolio using react so what are the next steps this Advanced react course has enhanced your Knowledge and Skills in several key areas you probably realize that there's still more for you to learn so if you found this course helpful and want to discover more then why not register for the next course you'll continue to develop your skill set during each of the front-end development courses in the final lab you'll apply everything you've learned to build your own fully functional website using react whether you're just starting out as a technical professional a student or a business user the course and projects prove your knowledge of the value and capabilities of front-end development the lab consolidates your abilities with a practical application of your skills but the lab also has an important benefit it means that you'll have a fully operational website built using react that you can reference within your portfolio this serves to demonstrate your skills to potential employers and not only does it show employers that you are self-driven and Innovative but it also speaks volumes about you as an individual as well as your newly obtained knowledge and once you've completed all the courses you'll receive a certificate in front-end development the certificate can also be used as a progression to other role-based certifications at meta depending on your goals you may choose to go deep with Advanced role-based certifications or take other fundamental courses these certificates provide globally recognized and Industry endorsed evidence of your technical skills thank you it's been a pleasure to embark on this journey of Discovery with you best of luck in the future"

